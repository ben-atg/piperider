{"tables":{"int_order_payments_pivoted":{"name":"int_order_payments_pivoted","row_count":99,"samples":99,"samples_p":1,"col_count":9,"columns":{"order_id":{"name":"order_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":99,"distinct_p":1.0,"min":1,"max":99,"sum":4950.0,"avg":50.0,"stddev":28.722813232690147,"duplicates":0,"duplicates_p":0.0,"non_duplicates":99,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":5,"p25":25,"p50":50,"p75":75,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":10,"description":"This is a unique identifier for an order"},"customer_id":{"name":"customer_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":62,"distinct_p":0.6262626262626263,"min":1,"max":99,"sum":4777.0,"avg":48.25252525252525,"stddev":27.781341350472967,"duplicates":66,"duplicates_p":0.6666666666666666,"non_duplicates":33,"non_duplicates_p":0.3333333333333333,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,3,1,3,1,2,1,1,1,2,4,0,4,3,2,2,2,3,1,2,3,0,2,2,2,4,7,0,2,1,0,4,3,1,4,3,0,1,0,3,0,2,3,1,3,2,3,0,0,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":26,"p50":50,"p75":70,"p95":93,"topk":{"values":["54","3","22","51","66","71","1","8","25","26","27","30","35","42","46","47","50","53","57","63","64","69","70","79","84","85","90","94","99","2","6","7","9","11","12","13","16","18","19","20","21","28","31","32","33","34","36","38","39","40"],"counts":[5,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":8,"description":"Foreign key to the customers table"},"order_date":{"name":"order_date","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":69,"distinct_p":0.696969696969697,"min":"2023-08-15","max":"2023-11-21","duplicates":53,"duplicates_p":0.5353535353535354,"non_duplicates":46,"non_duplicates_p":0.46464646464646464,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[15,27,33,24],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":2,"description":"Date (UTC) that the order was placed"},"status":{"name":"status","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":5,"distinct_p":0.050505050505050504,"min":6,"min_length":6,"max":14,"max_length":14,"avg":8.404040404040405,"avg_length":8.404040404040405,"stddev":1.3844559228926323,"stddev_length":1.3844559228926323,"duplicates":99,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["completed","shipped","placed","returned","return_pending"],"counts":[67,13,13,4,2]},"histogram":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"profile_duration":"0.01","elapsed_milli":5,"description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"},"credit_card_amount":{"name":"credit_card_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":50,"zeros_p":0.5050505050505051,"negatives":0,"negatives_p":0.0,"positives":49,"positives_p":0.494949494949495,"distinct":25,"distinct_p":0.25252525252525254,"min":0,"max":30,"sum":871.0,"avg":8.797979797979798,"stddev":10.95908885492767,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"counts":[50,2,0,2,2,2,1,0,1,0,2,0,2,2,1,2,2,1,1,4,1,0,3,3,1,0,3,2,1,5,3],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},"p5":0,"p25":0,"p50":0,"p75":19,"p95":29,"topk":{"values":["0","29","19","22","23","26","30","1","3","4","5","10","12","13","15","16","27","6","8","14","17","18","20","24","28"],"counts":[50,5,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6,"description":"Amount of the order (AUD) paid for by credit card"},"coupon_amount":{"name":"coupon_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":86,"zeros_p":0.8686868686868687,"negatives":0,"negatives_p":0.0,"positives":13,"positives_p":0.13131313131313133,"distinct":12,"distinct_p":0.12121212121212122,"min":0,"max":26,"sum":185.0,"avg":1.8686868686868687,"stddev":5.955012405351227,"duplicates":89,"duplicates_p":0.898989898989899,"non_duplicates":10,"non_duplicates_p":0.10101010101010101,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26"],"counts":[86,1,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]},"p5":0,"p25":0,"p50":0,"p75":0,"p95":20,"topk":{"values":["0","2","1","7","16","17","18","22","23","24","25","26"],"counts":[86,3,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Amount of the order (AUD) paid for by coupon"},"bank_transfer_amount":{"name":"bank_transfer_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":67,"zeros_p":0.6767676767676768,"negatives":0,"negatives_p":0.0,"positives":32,"positives_p":0.32323232323232326,"distinct":19,"distinct_p":0.1919191919191919,"min":0,"max":26,"sum":411.0,"avg":4.151515151515151,"stddev":7.420825132023677,"duplicates":89,"duplicates_p":0.898989898989899,"non_duplicates":10,"non_duplicates_p":0.10101010101010101,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26"],"counts":[67,0,3,3,1,1,0,0,3,1,1,1,1,0,2,4,1,2,0,2,1,0,1,0,0,1,3],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]},"p5":0,"p25":0,"p50":0,"p75":5,"p95":21,"topk":{"values":["0","15","2","3","8","26","14","17","19","4","5","9","10","11","12","16","20","22","25"],"counts":[67,4,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Amount of the order (AUD) paid for by bank transfer"},"gift_card_amount":{"name":"gift_card_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":87,"zeros_p":0.8787878787878788,"negatives":0,"negatives_p":0.0,"positives":12,"positives_p":0.12121212121212122,"distinct":11,"distinct_p":0.1111111111111111,"min":0,"max":30,"sum":205.0,"avg":2.0707070707070705,"stddev":6.392362351566517,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"counts":[87,0,0,1,0,0,2,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,2,0,0,1,0,1,0,1],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},"p5":0,"p25":0,"p50":0,"p75":0,"p95":21,"topk":{"values":["0","6","23","3","11","14","17","18","26","28","30"],"counts":[87,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Amount of the order (AUD) paid for by gift card"},"amount":{"name":"amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":1,"zeros_p":0.010101010101010102,"negatives":0,"negatives_p":0.0,"positives":98,"positives_p":0.98989898989899,"distinct":32,"distinct_p":0.32323232323232326,"min":0,"max":58,"sum":1672.0,"avg":16.88888888888889,"stddev":10.736062525374603,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0 _ 2","2 _ 4","4 _ 6","6 _ 8","8 _ 10","10 _ 12","12 _ 14","14 _ 16","16 _ 18","18 _ 20","20 _ 22","22 _ 24","24 _ 26","26 _ 28","28 _ 30","30 _ 32","32 _ 34","34 _ 36","36 _ 38","38 _ 40","40 _ 42","42 _ 44","44 _ 46","46 _ 48","48 _ 50","50 _ 52","52 _ 54","54 _ 56","56 _ 58","58 _ 60"],"counts":[4,11,4,3,5,4,5,8,9,7,1,11,5,9,8,3,0,0,0,0,0,0,0,0,0,0,0,0,1,1],"bin_edges":[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]},"p5":2,"p25":8,"p50":17,"p75":24,"p95":30,"topk":{"values":["23","26","3","17","19","29","2","15","8","22","1","10","12","14","16","24","30","4","5","6","13","25","27","28","0","7","9","11","18","20","56","58"],"counts":[7,7,6,6,6,6,5,5,4,4,3,3,3,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Total amount (AUD) of the order"}},"ref_id":"model.jaffle_shop.int_order_payments_pivoted","profile_duration":"0.06","elapsed_milli":58,"description":"This table has basic information about orders, as well as some derived facts based on payments"},"int_customer_order_history_joined":{"name":"int_customer_order_history_joined","row_count":100,"samples":100,"samples_p":1,"col_count":7,"columns":{"customer_id":{"name":"customer_id","type":"integer","schema_type":"INTEGER","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":100,"positives_p":1.0,"distinct":100,"distinct_p":1.0,"min":1,"max":100,"sum":5050.0,"avg":50.5,"stddev":29.011491975882013,"duplicates":0,"duplicates_p":0.0,"non_duplicates":100,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":6,"p25":26,"p50":50,"p75":76,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7,"description":"This is a unique identifier for a customer"},"first_name":{"name":"first_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":79,"distinct_p":0.79,"min":3,"min_length":3,"max":10,"max_length":10,"avg":5.86,"avg_length":5.86,"stddev":1.5571276327412809,"stddev_length":1.5571276327412809,"duplicates":40,"duplicates_p":0.4,"non_duplicates":60,"non_duplicates_p":0.6,"topk":{"values":["Adam","Shirley","Michael","Kathleen","Jennifer","Virginia","Willie","Benjamin","Lisa","Christina","Jane","Katherine","Norma","Anne","Paul","David","Phillip","Kathryn","Harry","Shawn","Sarah","Martin","Frank","Fred","Amy","Amanda","Johnny","Anna","Sean","Victor","Aaron","Thomas","Sara","Harold","Dennis","Louise","Maria","Diana","Marie","Howard","Laura","Rose","Edward","Jesse","Janet","Helen","Gerald","Barbara","Jack","Theresa"],"counts":[3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"histogram":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"histogram_length":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"profile_duration":"0.00","elapsed_milli":4,"description":"Customer's first name. PII."},"last_name":{"name":"last_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":19,"distinct_p":0.19,"min":2,"min_length":2,"max":2,"max_length":2,"avg":2.0,"avg_length":2.0,"stddev":0.0,"stddev_length":0.0,"duplicates":98,"duplicates_p":0.98,"non_duplicates":2,"non_duplicates_p":0.02,"topk":{"values":["R.","H.","W.","M.","P.","C.","A.","F.","B.","K.","G.","O.","S.","D.","J.","T.","N.","E.","L."],"counts":[13,11,11,8,7,7,6,5,5,4,4,4,3,3,3,2,2,1,1]},"histogram":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"histogram_length":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"profile_duration":"0.00","elapsed_milli":3,"description":"Customer's last name. PII."},"first_order":{"name":"first_order","type":"datetime","schema_type":"DATE","total":100,"samples":100,"samples_p":1,"non_nulls":62,"non_nulls_p":0.62,"nulls":38,"nulls_p":0.38,"valids":62,"valids_p":0.62,"invalids":0,"invalids_p":0.0,"distinct":46,"distinct_p":0.7419354838709677,"min":"2023-08-15","max":"2023-11-19","duplicates":29,"duplicates_p":0.46774193548387094,"non_duplicates":33,"non_duplicates_p":0.532258064516129,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[15,19,17,11],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":2,"description":"Date (UTC) of a customer's first order"},"most_recent_order":{"name":"most_recent_order","type":"datetime","schema_type":"DATE","total":100,"samples":100,"samples_p":1,"non_nulls":62,"non_nulls_p":0.62,"nulls":38,"nulls_p":0.38,"valids":62,"valids_p":0.62,"invalids":0,"invalids_p":0.0,"distinct":52,"distinct_p":0.8387096774193549,"min":"2023-08-23","max":"2023-11-21","duplicates":18,"duplicates_p":0.2903225806451613,"non_duplicates":44,"non_duplicates_p":0.7096774193548387,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[5,14,23,20],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":2,"description":"Date (UTC) of a customer's most recent order"},"number_of_orders":{"name":"number_of_orders","type":"integer","schema_type":"BIGINT","total":100,"samples":100,"samples_p":1,"non_nulls":62,"non_nulls_p":0.62,"nulls":38,"nulls_p":0.38,"valids":62,"valids_p":0.62,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":62,"positives_p":0.62,"distinct":4,"distinct_p":0.06451612903225806,"min":1,"max":5,"sum":99.0,"avg":1.596774193548387,"stddev":0.7779687173818423,"duplicates":61,"duplicates_p":0.9838709677419355,"non_duplicates":1,"non_duplicates_p":0.016129032258064516,"histogram":{"labels":["1","2","3","4","5"],"counts":[33,23,5,0,1],"bin_edges":[1,2,3,4,5,6]},"p5":1,"p25":1,"p50":1,"p75":2,"p95":3,"topk":{"values":["1","2","3","5"],"counts":[33,23,5,1]},"profile_duration":"0.01","elapsed_milli":6,"description":"Count of the number of orders a customer has placed"},"customer_lifetime_value":{"name":"customer_lifetime_value","type":"integer","schema_type":"BIGINT","total":100,"samples":100,"samples_p":1,"non_nulls":62,"non_nulls_p":0.62,"nulls":38,"nulls_p":0.38,"valids":62,"valids_p":0.62,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":62,"positives_p":0.62,"distinct":35,"distinct_p":0.5645161290322581,"min":1,"max":99,"sum":1672.0,"avg":26.967741935483872,"stddev":18.812245525263663,"duplicates":44,"duplicates_p":0.7096774193548387,"non_duplicates":18,"non_duplicates_p":0.2903225806451613,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,6,0,3,2,1,2,3,2,0,1,5,3,5,6,1,3,2,0,2,0,3,1,1,0,1,1,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":14,"p50":26,"p75":36,"p95":60,"topk":{"values":["3","27","8","23","26","29","30","2","10","14","15","24","33","36","39","44","57","1","4","12","16","17","18","22","28","32","34","43","45","47","52","54","64","65","99"],"counts":[5,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7}},"ref_id":"model.jaffle_shop.int_customer_order_history_joined","profile_duration":"0.03","elapsed_milli":34,"description":"This table has basic information about a customer, as well as some derived facts based on a customer's orders"},"metricflow_time_spine":{"name":"metricflow_time_spine","row_count":9862,"samples":9862,"samples_p":1,"col_count":1,"columns":{"date_day":{"name":"date_day","type":"datetime","schema_type":"DATE","total":9862,"samples":9862,"samples_p":1,"non_nulls":9862,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":9862,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":9862,"distinct_p":1.0,"min":"2000-01-01","max":"2026-12-31","duplicates":0,"duplicates_p":0.0,"non_duplicates":9862,"non_duplicates_p":1.0,"histogram":{"labels":["2000-01-01 - 2001-01-01","2001-01-01 - 2002-01-01","2002-01-01 - 2003-01-01","2003-01-01 - 2004-01-01","2004-01-01 - 2005-01-01","2005-01-01 - 2006-01-01","2006-01-01 - 2007-01-01","2007-01-01 - 2008-01-01","2008-01-01 - 2009-01-01","2009-01-01 - 2010-01-01","2010-01-01 - 2011-01-01","2011-01-01 - 2012-01-01","2012-01-01 - 2013-01-01","2013-01-01 - 2014-01-01","2014-01-01 - 2015-01-01","2015-01-01 - 2016-01-01","2016-01-01 - 2017-01-01","2017-01-01 - 2018-01-01","2018-01-01 - 2019-01-01","2019-01-01 - 2020-01-01","2020-01-01 - 2021-01-01","2021-01-01 - 2022-01-01","2022-01-01 - 2023-01-01","2023-01-01 - 2024-01-01","2024-01-01 - 2025-01-01","2025-01-01 - 2026-01-01","2026-01-01 - 2027-01-01"],"counts":[366,365,365,365,366,365,365,365,366,365,365,365,366,365,365,365,366,365,365,365,366,365,365,365,366,365,365],"bin_edges":["2000-01-01","2001-01-01","2002-01-01","2003-01-01","2004-01-01","2005-01-01","2006-01-01","2007-01-01","2008-01-01","2009-01-01","2010-01-01","2011-01-01","2012-01-01","2013-01-01","2014-01-01","2015-01-01","2016-01-01","2017-01-01","2018-01-01","2019-01-01","2020-01-01","2021-01-01","2022-01-01","2023-01-01","2024-01-01","2025-01-01","2026-01-01","2027-01-01"]},"profile_duration":"0.00","elapsed_milli":4}},"ref_id":"model.jaffle_shop.metricflow_time_spine","profile_duration":"0.01","elapsed_milli":5},"stg_customers":{"name":"stg_customers","row_count":100,"samples":100,"samples_p":1,"col_count":3,"columns":{"customer_id":{"name":"customer_id","type":"integer","schema_type":"INTEGER","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":100,"positives_p":1.0,"distinct":100,"distinct_p":1.0,"min":1,"max":100,"sum":5050.0,"avg":50.5,"stddev":29.011491975882016,"duplicates":0,"duplicates_p":0.0,"non_duplicates":100,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":6,"p25":26,"p50":50,"p75":76,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"first_name":{"name":"first_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":79,"distinct_p":0.79,"min":3,"min_length":3,"max":10,"max_length":10,"avg":5.86,"avg_length":5.86,"stddev":1.5571276327412809,"stddev_length":1.5571276327412809,"duplicates":40,"duplicates_p":0.4,"non_duplicates":60,"non_duplicates_p":0.6,"topk":{"values":["Shirley","Adam","Michael","Kathleen","Katherine","Jennifer","Virginia","Willie","David","Benjamin","Lisa","Christina","Jane","Norma","Anne","Paul","Kathryn","Harry","Phillip","Shawn","Jimmy","Sarah","Martin","Frank","Henry","Fred","Amy","Steve","Teresa","Amanda","Kimberly","Johnny","Anna","Sean","Mildred","Victor","Aaron","Thomas","Sara","Harold","Dennis","Louise","Maria","Diana","Kelly","Scott","Marie","Lillian","Judy","Billy"],"counts":[3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"histogram":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"histogram_length":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"profile_duration":"0.00","elapsed_milli":4},"last_name":{"name":"last_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":19,"distinct_p":0.19,"min":2,"min_length":2,"max":2,"max_length":2,"avg":2.0,"avg_length":2.0,"stddev":0.0,"stddev_length":0.0,"duplicates":98,"duplicates_p":0.98,"non_duplicates":2,"non_duplicates_p":0.02,"topk":{"values":["R.","W.","H.","M.","P.","C.","A.","F.","B.","K.","G.","O.","S.","D.","J.","T.","N.","L.","E."],"counts":[13,11,11,8,7,7,6,5,5,4,4,4,3,3,3,2,2,1,1]},"histogram":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"histogram_length":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"profile_duration":"0.00","elapsed_milli":3}},"ref_id":"model.jaffle_shop.stg_customers","profile_duration":"0.02","elapsed_milli":16},"stg_payments":{"name":"stg_payments","row_count":113,"samples":113,"samples_p":1,"col_count":4,"columns":{"payment_id":{"name":"payment_id","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":113,"positives_p":1.0,"distinct":113,"distinct_p":1.0,"min":1,"max":113,"sum":6441.0,"avg":57.0,"stddev":32.76430985081175,"duplicates":0,"duplicates_p":0.0,"non_duplicates":113,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 4","4 _ 7","7 _ 10","10 _ 13","13 _ 16","16 _ 19","19 _ 22","22 _ 25","25 _ 28","28 _ 31","31 _ 34","34 _ 37","37 _ 40","40 _ 43","43 _ 46","46 _ 49","49 _ 52","52 _ 55","55 _ 58","58 _ 61","61 _ 64","64 _ 67","67 _ 70","70 _ 73","73 _ 76","76 _ 79","79 _ 82","82 _ 85","85 _ 88","88 _ 91","91 _ 94","94 _ 97","97 _ 100","100 _ 103","103 _ 106","106 _ 109","109 _ 112","112 _ 115"],"counts":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],"bin_edges":[1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115]},"p5":6,"p25":29,"p50":57,"p75":85,"p95":108,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"order_id":{"name":"order_id","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":113,"positives_p":1.0,"distinct":99,"distinct_p":0.8761061946902655,"min":1,"max":99,"sum":5654.0,"avg":50.0353982300885,"stddev":28.54317819535489,"duplicates":27,"duplicates_p":0.23893805309734514,"non_duplicates":86,"non_duplicates_p":0.7610619469026548,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,3,2,3,2,3,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,3,2,2,2,2,3,2,2,2,2,3,3,2,2,2,3,2,3,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":6,"p25":25,"p50":51,"p75":75,"p95":94,"topk":{"values":["25","9","13","18","49","51","54","58","67","77","79","87","92","1","2","3","4","5","6","7","8","10","11","12","14","15","16","17","19","20","21","22","23","24","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"counts":[3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"payment_method":{"name":"payment_method","type":"string","schema_type":"VARCHAR","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":113,"non_zero_length_p":1.0,"distinct":4,"distinct_p":0.035398230088495575,"min":6,"min_length":6,"max":13,"max_length":13,"avg":10.79646017699115,"avg_length":10.79646017699115,"stddev":2.113558661338224,"stddev_length":2.113558661338224,"duplicates":113,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["credit_card","bank_transfer","coupon","gift_card"],"counts":[55,33,13,12]},"histogram":{"labels":["6","7","8","9","10","11","12","13"],"counts":[13,0,0,12,0,55,0,33],"bin_edges":[6,7,8,9,10,11,12,13,14]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13"],"counts":[13,0,0,12,0,55,0,33],"bin_edges":[6,7,8,9,10,11,12,13,14]},"profile_duration":"0.00","elapsed_milli":4},"amount":{"name":"amount","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":3,"zeros_p":0.02654867256637168,"negatives":0,"negatives_p":0.0,"positives":110,"positives_p":0.9734513274336283,"distinct":30,"distinct_p":0.26548672566371684,"min":0,"max":30,"sum":1672.0,"avg":14.79646017699115,"stddev":9.19836873351873,"duplicates":110,"duplicates_p":0.9734513274336283,"non_duplicates":3,"non_duplicates_p":0.02654867256637168,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"counts":[3,4,6,6,3,4,4,1,5,3,3,2,3,1,4,5,4,5,4,6,2,0,5,6,2,2,8,1,2,6,3],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},"p5":1,"p25":6,"p50":15,"p75":23,"p95":29,"topk":{"values":["26","23","3","2","19","29","17","22","8","15","1","6","16","5","14","18","10","0","12","30","9","4","20","25","11","28","24","27","13","7"],"counts":[8,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,3,3,3,3,3,3,2,2,2,2,2,1,1,1]},"profile_duration":"0.01","elapsed_milli":6}},"ref_id":"model.jaffle_shop.stg_payments","profile_duration":"0.03","elapsed_milli":26},"stg_orders":{"name":"stg_orders","row_count":99,"samples":99,"samples_p":1,"col_count":4,"columns":{"order_id":{"name":"order_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":99,"distinct_p":1.0,"min":1,"max":99,"sum":4950.0,"avg":50.0,"stddev":28.722813232690143,"duplicates":0,"duplicates_p":0.0,"non_duplicates":99,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":5,"p25":25,"p50":50,"p75":75,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":10},"customer_id":{"name":"customer_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":62,"distinct_p":0.6262626262626263,"min":1,"max":99,"sum":4777.0,"avg":48.25252525252525,"stddev":27.781341350472957,"duplicates":66,"duplicates_p":0.6666666666666666,"non_duplicates":33,"non_duplicates_p":0.3333333333333333,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,3,1,3,1,2,1,1,1,2,4,0,4,3,2,2,2,3,1,2,3,0,2,2,2,4,7,0,2,1,0,4,3,1,4,3,0,1,0,3,0,2,3,1,3,2,3,0,0,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":26,"p50":50,"p75":70,"p95":93,"topk":{"values":["54","3","22","51","66","71","1","8","25","26","27","30","35","42","46","47","50","53","57","63","64","69","70","79","84","85","90","94","99","2","6","7","9","11","12","13","16","18","19","20","21","28","31","32","33","34","36","38","39","40"],"counts":[5,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"order_date":{"name":"order_date","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":69,"distinct_p":0.696969696969697,"min":"2023-08-15","max":"2023-11-21","duplicates":53,"duplicates_p":0.5353535353535354,"non_duplicates":46,"non_duplicates_p":0.46464646464646464,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[15,27,33,24],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":2},"status":{"name":"status","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":5,"distinct_p":0.050505050505050504,"min":6,"min_length":6,"max":14,"max_length":14,"avg":8.404040404040405,"avg_length":8.404040404040405,"stddev":1.384455922892632,"stddev_length":1.384455922892632,"duplicates":99,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["completed","shipped","placed","returned","return_pending"],"counts":[67,13,13,4,2]},"histogram":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"profile_duration":"0.00","elapsed_milli":4}},"ref_id":"model.jaffle_shop.stg_orders","profile_duration":"0.03","elapsed_milli":25},"raw_customers":{"name":"raw_customers","row_count":100,"samples":100,"samples_p":1,"col_count":3,"columns":{"id":{"name":"id","type":"integer","schema_type":"INTEGER","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":100,"positives_p":1.0,"distinct":100,"distinct_p":1.0,"min":1,"max":100,"sum":5050.0,"avg":50.5,"stddev":29.011491975882016,"duplicates":0,"duplicates_p":0.0,"non_duplicates":100,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":6,"p25":26,"p50":50,"p75":76,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"first_name":{"name":"first_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":79,"distinct_p":0.79,"min":3,"min_length":3,"max":10,"max_length":10,"avg":5.86,"avg_length":5.86,"stddev":1.5571276327412809,"stddev_length":1.5571276327412809,"duplicates":40,"duplicates_p":0.4,"non_duplicates":60,"non_duplicates_p":0.6,"topk":{"values":["Shirley","Adam","Michael","Kathleen","Katherine","Jennifer","Virginia","Willie","David","Benjamin","Lisa","Christina","Jane","Norma","Anne","Paul","Kathryn","Harry","Phillip","Shawn","Jimmy","Sarah","Martin","Frank","Henry","Fred","Amy","Steve","Teresa","Amanda","Kimberly","Johnny","Anna","Sean","Mildred","Victor","Aaron","Thomas","Sara","Harold","Dennis","Louise","Maria","Diana","Kelly","Scott","Marie","Lillian","Judy","Billy"],"counts":[3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"histogram":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"histogram_length":{"labels":["3","4","5","6","7","8","9","10"],"counts":[1,22,24,20,16,11,5,1],"bin_edges":[3,4,5,6,7,8,9,10,11]},"profile_duration":"0.00","elapsed_milli":4},"last_name":{"name":"last_name","type":"string","schema_type":"VARCHAR","total":100,"samples":100,"samples_p":1,"non_nulls":100,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":100,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":100,"non_zero_length_p":1.0,"distinct":19,"distinct_p":0.19,"min":2,"min_length":2,"max":2,"max_length":2,"avg":2.0,"avg_length":2.0,"stddev":0.0,"stddev_length":0.0,"duplicates":98,"duplicates_p":0.98,"non_duplicates":2,"non_duplicates_p":0.02,"topk":{"values":["R.","W.","H.","M.","P.","C.","A.","F.","B.","K.","G.","O.","S.","D.","J.","T.","N.","L.","E."],"counts":[13,11,11,8,7,7,6,5,5,4,4,4,3,3,3,2,2,1,1]},"histogram":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"histogram_length":{"labels":["2"],"counts":[100],"bin_edges":[2,3]},"profile_duration":"0.00","elapsed_milli":3}},"ref_id":"seed.jaffle_shop.raw_customers","profile_duration":"0.02","elapsed_milli":15},"raw_orders":{"name":"raw_orders","row_count":99,"samples":99,"samples_p":1,"col_count":4,"columns":{"id":{"name":"id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":99,"distinct_p":1.0,"min":1,"max":99,"sum":4950.0,"avg":50.0,"stddev":28.722813232690143,"duplicates":0,"duplicates_p":0.0,"non_duplicates":99,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":5,"p25":25,"p50":50,"p75":75,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"user_id":{"name":"user_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":62,"distinct_p":0.6262626262626263,"min":1,"max":99,"sum":4777.0,"avg":48.25252525252525,"stddev":27.781341350472957,"duplicates":66,"duplicates_p":0.6666666666666666,"non_duplicates":33,"non_duplicates_p":0.3333333333333333,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,3,1,3,1,2,1,1,1,2,4,0,4,3,2,2,2,3,1,2,3,0,2,2,2,4,7,0,2,1,0,4,3,1,4,3,0,1,0,3,0,2,3,1,3,2,3,0,0,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":26,"p50":50,"p75":70,"p95":93,"topk":{"values":["54","3","22","51","66","71","1","8","25","26","27","30","35","42","46","47","50","53","57","63","64","69","70","79","84","85","90","94","99","2","6","7","9","11","12","13","16","18","19","20","21","28","31","32","33","34","36","38","39","40"],"counts":[5,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6},"order_date":{"name":"order_date","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":69,"distinct_p":0.696969696969697,"min":"2018-01-01","max":"2018-04-09","duplicates":53,"duplicates_p":0.5353535353535354,"non_duplicates":46,"non_duplicates_p":0.46464646464646464,"histogram":{"labels":["2018-01-01 - 2018-02-01","2018-02-01 - 2018-03-01","2018-03-01 - 2018-04-01","2018-04-01 - 2018-05-01"],"counts":[29,27,35,8],"bin_edges":["2018-01-01","2018-02-01","2018-03-01","2018-04-01","2018-05-01"]},"profile_duration":"0.00","elapsed_milli":2},"status":{"name":"status","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":5,"distinct_p":0.050505050505050504,"min":6,"min_length":6,"max":14,"max_length":14,"avg":8.404040404040405,"avg_length":8.404040404040405,"stddev":1.384455922892632,"stddev_length":1.384455922892632,"duplicates":99,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["completed","shipped","placed","returned","return_pending"],"counts":[67,13,13,4,2]},"histogram":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"profile_duration":"0.00","elapsed_milli":4}},"ref_id":"seed.jaffle_shop.raw_orders","profile_duration":"0.02","elapsed_milli":21},"raw_payments":{"name":"raw_payments","row_count":113,"samples":113,"samples_p":1,"col_count":4,"columns":{"id":{"name":"id","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":113,"positives_p":1.0,"distinct":113,"distinct_p":1.0,"min":1,"max":113,"sum":6441.0,"avg":57.0,"stddev":32.76430985081175,"duplicates":0,"duplicates_p":0.0,"non_duplicates":113,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 4","4 _ 7","7 _ 10","10 _ 13","13 _ 16","16 _ 19","19 _ 22","22 _ 25","25 _ 28","28 _ 31","31 _ 34","34 _ 37","37 _ 40","40 _ 43","43 _ 46","46 _ 49","49 _ 52","52 _ 55","55 _ 58","58 _ 61","61 _ 64","64 _ 67","67 _ 70","70 _ 73","73 _ 76","76 _ 79","79 _ 82","82 _ 85","85 _ 88","88 _ 91","91 _ 94","94 _ 97","97 _ 100","100 _ 103","103 _ 106","106 _ 109","109 _ 112","112 _ 115"],"counts":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],"bin_edges":[1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115]},"p5":6,"p25":29,"p50":57,"p75":85,"p95":108,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":8},"order_id":{"name":"order_id","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":113,"positives_p":1.0,"distinct":99,"distinct_p":0.8761061946902655,"min":1,"max":99,"sum":5654.0,"avg":50.0353982300885,"stddev":28.54317819535489,"duplicates":27,"duplicates_p":0.23893805309734514,"non_duplicates":86,"non_duplicates_p":0.7610619469026548,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,3,2,3,2,3,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,3,2,2,2,2,3,2,2,2,2,3,3,2,2,2,3,2,3,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":6,"p25":25,"p50":51,"p75":75,"p95":94,"topk":{"values":["25","9","13","18","49","51","54","58","67","77","79","87","92","1","2","3","4","5","6","7","8","10","11","12","14","15","16","17","19","20","21","22","23","24","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"counts":[3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7},"payment_method":{"name":"payment_method","type":"string","schema_type":"VARCHAR","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":113,"non_zero_length_p":1.0,"distinct":4,"distinct_p":0.035398230088495575,"min":6,"min_length":6,"max":13,"max_length":13,"avg":10.79646017699115,"avg_length":10.79646017699115,"stddev":2.113558661338224,"stddev_length":2.113558661338224,"duplicates":113,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["credit_card","bank_transfer","coupon","gift_card"],"counts":[55,33,13,12]},"histogram":{"labels":["6","7","8","9","10","11","12","13"],"counts":[13,0,0,12,0,55,0,33],"bin_edges":[6,7,8,9,10,11,12,13,14]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13"],"counts":[13,0,0,12,0,55,0,33],"bin_edges":[6,7,8,9,10,11,12,13,14]},"profile_duration":"0.00","elapsed_milli":4},"amount":{"name":"amount","type":"integer","schema_type":"INTEGER","total":113,"samples":113,"samples_p":1,"non_nulls":113,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":113,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":3,"zeros_p":0.02654867256637168,"negatives":0,"negatives_p":0.0,"positives":110,"positives_p":0.9734513274336283,"distinct":30,"distinct_p":0.26548672566371684,"min":0,"max":3000,"sum":167200.0,"avg":1479.646017699115,"stddev":919.836873351873,"duplicates":110,"duplicates_p":0.9734513274336283,"non_duplicates":3,"non_duplicates_p":0.02654867256637168,"histogram":{"labels":["0 _ 60","60 _ 120","120 _ 180","180 _ 240","240 _ 300","300 _ 360","360 _ 420","420 _ 480","480 _ 540","540 _ 600","600 _ 660","660 _ 720","720 _ 780","780 _ 840","840 _ 900","900 _ 960","960 _ 1020","1020 _ 1080","1080 _ 1140","1140 _ 1200","1200 _ 1260","1260 _ 1320","1320 _ 1380","1380 _ 1440","1440 _ 1500","1500 _ 1560","1560 _ 1620","1620 _ 1680","1680 _ 1740","1740 _ 1800","1800 _ 1860","1860 _ 1920","1920 _ 1980","1980 _ 2040","2040 _ 2100","2100 _ 2160","2160 _ 2220","2220 _ 2280","2280 _ 2340","2340 _ 2400","2400 _ 2460","2460 _ 2520","2520 _ 2580","2580 _ 2640","2640 _ 2700","2700 _ 2760","2760 _ 2820","2820 _ 2880","2880 _ 2940","2940 _ 3000","3000 _ 3060"],"counts":[3,4,0,6,0,6,3,0,4,0,4,1,0,5,0,3,3,0,2,0,3,1,0,4,0,5,4,0,5,0,4,6,0,2,0,0,5,0,6,0,2,2,0,8,0,1,2,0,6,0,3],"bin_edges":[0,60,120,180,240,300,360,420,480,540,600,660,720,780,840,900,960,1020,1080,1140,1200,1260,1320,1380,1440,1500,1560,1620,1680,1740,1800,1860,1920,1980,2040,2100,2160,2220,2280,2340,2400,2460,2520,2580,2640,2700,2760,2820,2880,2940,3000,3060]},"p5":100,"p25":600,"p50":1500,"p75":2300,"p95":2900,"topk":{"values":["2600","200","300","1900","2300","2900","800","1500","1700","2200","100","500","600","1400","1600","1800","0","400","900","1000","1200","3000","1100","2000","2400","2500","2800","700","1300","2700"],"counts":[8,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,3,3,3,3,3,3,2,2,2,2,2,1,1,1]},"profile_duration":"0.01","elapsed_milli":7}},"ref_id":"seed.jaffle_shop.raw_payments","profile_duration":"0.03","elapsed_milli":28},"orders":{"name":"orders","row_count":99,"samples":99,"samples_p":1,"col_count":15,"columns":{"order_id":{"name":"order_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":99,"distinct_p":1.0,"min":1,"max":99,"sum":4950.0,"avg":50.0,"stddev":28.722813232690143,"duplicates":0,"duplicates_p":0.0,"non_duplicates":99,"non_duplicates_p":1.0,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":5,"p25":25,"p50":50,"p75":75,"p95":95,"topk":{"values":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"counts":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7,"description":"This is a unique identifier for an order"},"customer_id":{"name":"customer_id","type":"integer","schema_type":"INTEGER","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":62,"distinct_p":0.6262626262626263,"min":1,"max":99,"sum":4777.0,"avg":48.25252525252525,"stddev":27.781341350472957,"duplicates":66,"duplicates_p":0.6666666666666666,"non_duplicates":33,"non_duplicates_p":0.3333333333333333,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,3,1,3,1,2,1,1,1,2,4,0,4,3,2,2,2,3,1,2,3,0,2,2,2,4,7,0,2,1,0,4,3,1,4,3,0,1,0,3,0,2,3,1,3,2,3,0,0,2],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":26,"p50":50,"p75":70,"p95":93,"topk":{"values":["54","3","22","51","66","71","1","8","25","26","27","30","35","42","46","47","50","53","57","63","64","69","70","79","84","85","90","94","99","2","6","7","9","11","12","13","16","18","19","20","21","28","31","32","33","34","36","38","39","40"],"counts":[5,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6,"description":"This is a unique identifier for a customer"},"order_date":{"name":"order_date","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":69,"distinct_p":0.696969696969697,"min":"2023-08-15","max":"2023-11-21","duplicates":53,"duplicates_p":0.5353535353535354,"non_duplicates":46,"non_duplicates_p":0.46464646464646464,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[15,27,33,24],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":1,"description":"Date (UTC) that the order was placed"},"status":{"name":"status","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":5,"distinct_p":0.050505050505050504,"min":6,"min_length":6,"max":14,"max_length":14,"avg":8.404040404040405,"avg_length":8.404040404040405,"stddev":1.3844559228926328,"stddev_length":1.3844559228926328,"duplicates":99,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"topk":{"values":["completed","shipped","placed","returned","return_pending"],"counts":[67,13,13,4,2]},"histogram":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"histogram_length":{"labels":["6","7","8","9","10","11","12","13","14"],"counts":[13,13,4,67,0,0,0,0,2],"bin_edges":[6,7,8,9,10,11,12,13,14,15]},"profile_duration":"0.00","elapsed_milli":4,"description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"},"credit_card_amount":{"name":"credit_card_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":50,"zeros_p":0.5050505050505051,"negatives":0,"negatives_p":0.0,"positives":49,"positives_p":0.494949494949495,"distinct":25,"distinct_p":0.25252525252525254,"min":0,"max":30,"sum":871.0,"avg":8.797979797979798,"stddev":10.959088854927677,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"counts":[50,2,0,2,2,2,1,0,1,0,2,0,2,2,1,2,2,1,1,4,1,0,3,3,1,0,3,2,1,5,3],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},"p5":0,"p25":0,"p50":0,"p75":19,"p95":29,"topk":{"values":["0","29","19","22","23","26","30","1","3","4","5","10","12","13","15","16","27","6","8","14","17","18","20","24","28"],"counts":[50,5,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6,"description":"Amount of the order (AUD) paid for by credit card"},"coupon_amount":{"name":"coupon_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":86,"zeros_p":0.8686868686868687,"negatives":0,"negatives_p":0.0,"positives":13,"positives_p":0.13131313131313133,"distinct":12,"distinct_p":0.12121212121212122,"min":0,"max":26,"sum":185.0,"avg":1.8686868686868687,"stddev":5.955012405351228,"duplicates":89,"duplicates_p":0.898989898989899,"non_duplicates":10,"non_duplicates_p":0.10101010101010101,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26"],"counts":[86,1,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]},"p5":0,"p25":0,"p50":0,"p75":0,"p95":20,"topk":{"values":["0","2","1","7","16","17","18","22","23","24","25","26"],"counts":[86,3,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Amount of the order (AUD) paid for by coupon"},"bank_transfer_amount":{"name":"bank_transfer_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":67,"zeros_p":0.6767676767676768,"negatives":0,"negatives_p":0.0,"positives":32,"positives_p":0.32323232323232326,"distinct":19,"distinct_p":0.1919191919191919,"min":0,"max":26,"sum":411.0,"avg":4.151515151515151,"stddev":7.420825132023677,"duplicates":89,"duplicates_p":0.898989898989899,"non_duplicates":10,"non_duplicates_p":0.10101010101010101,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26"],"counts":[67,0,3,3,1,1,0,0,3,1,1,1,1,0,2,4,1,2,0,2,1,0,1,0,0,1,3],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]},"p5":0,"p25":0,"p50":0,"p75":5,"p95":21,"topk":{"values":["0","15","2","3","8","26","14","17","19","4","5","9","10","11","12","16","20","22","25"],"counts":[67,4,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6,"description":"Amount of the order (AUD) paid for by bank transfer"},"gift_card_amount":{"name":"gift_card_amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":87,"zeros_p":0.8787878787878788,"negatives":0,"negatives_p":0.0,"positives":12,"positives_p":0.12121212121212122,"distinct":11,"distinct_p":0.1111111111111111,"min":0,"max":30,"sum":205.0,"avg":2.0707070707070705,"stddev":6.3923623515665176,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"],"counts":[87,0,0,1,0,0,2,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,2,0,0,1,0,1,0,1],"bin_edges":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},"p5":0,"p25":0,"p50":0,"p75":0,"p95":21,"topk":{"values":["0","6","23","3","11","14","17","18","26","28","30"],"counts":[87,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":7,"description":"Amount of the order (AUD) paid for by gift card"},"amount":{"name":"amount","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":1,"zeros_p":0.010101010101010102,"negatives":0,"negatives_p":0.0,"positives":98,"positives_p":0.98989898989899,"distinct":32,"distinct_p":0.32323232323232326,"min":0,"max":58,"sum":1672.0,"avg":16.88888888888889,"stddev":10.736062525374601,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["0 _ 2","2 _ 4","4 _ 6","6 _ 8","8 _ 10","10 _ 12","12 _ 14","14 _ 16","16 _ 18","18 _ 20","20 _ 22","22 _ 24","24 _ 26","26 _ 28","28 _ 30","30 _ 32","32 _ 34","34 _ 36","36 _ 38","38 _ 40","40 _ 42","42 _ 44","44 _ 46","46 _ 48","48 _ 50","50 _ 52","52 _ 54","54 _ 56","56 _ 58","58 _ 60"],"counts":[4,11,4,3,5,4,5,8,9,7,1,11,5,9,8,3,0,0,0,0,0,0,0,0,0,0,0,0,1,1],"bin_edges":[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]},"p5":2,"p25":8,"p50":17,"p75":24,"p95":30,"topk":{"values":["23","26","3","17","19","29","2","15","8","22","1","10","12","14","16","24","30","4","5","6","13","25","27","28","0","7","9","11","18","20","56","58"],"counts":[7,7,6,6,6,6,5,5,4,4,3,3,3,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":5,"description":"Total amount (AUD) of the order"},"first_name":{"name":"first_name","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":55,"distinct_p":0.5555555555555556,"min":3,"min_length":3,"max":9,"max_length":9,"avg":5.565656565656566,"avg_length":5.565656565656566,"stddev":1.526377705961887,"stddev_length":1.526377705961887,"duplicates":73,"duplicates_p":0.7373737373737373,"non_duplicates":26,"non_duplicates_p":0.26262626262626265,"topk":{"values":["Rose","Adam","Kathleen","Christina","Paul","Gerald","Sean","Howard","Michael","Gregory","Billy","David","Mary","Victor","Frank","Janet","Diana","Theresa","Aaron","Willie","Benjamin","Sara","Jennifer","Edward","Helen","Norma","Marie","Anne","Jack","Shawn","Martin","Maria","Louise","Anna","Jason","Thomas","Amanda","Lisa","Dennis","Phillip","Katherine","Jane","Sarah","Johnny","Frances","Amy","Harold","Virginia","Laura","Fred"],"counts":[5,5,4,4,4,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"histogram":{"labels":["3","4","5","6","7","8","9"],"counts":[1,30,24,20,9,10,5],"bin_edges":[3,4,5,6,7,8,9,10]},"histogram_length":{"labels":["3","4","5","6","7","8","9"],"counts":[1,30,24,20,9,10,5],"bin_edges":[3,4,5,6,7,8,9,10]},"profile_duration":"0.00","elapsed_milli":4,"description":"Customer's first name. PII."},"last_name":{"name":"last_name","type":"string","schema_type":"VARCHAR","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zero_length":0,"zero_length_p":0.0,"non_zero_length":99,"non_zero_length_p":1.0,"distinct":18,"distinct_p":0.18181818181818182,"min":2,"min_length":2,"max":2,"max_length":2,"avg":2.0,"avg_length":2.0,"stddev":0.0,"stddev_length":0.0,"duplicates":96,"duplicates_p":0.9696969696969697,"non_duplicates":3,"non_duplicates_p":0.030303030303030304,"topk":{"values":["R.","P.","M.","W.","H.","C.","G.","F.","S.","B.","T.","A.","O.","L.","J.","K.","D.","E."],"counts":[13,11,11,11,10,9,5,5,4,4,3,3,3,2,2,1,1,1]},"histogram":{"labels":["2"],"counts":[99],"bin_edges":[2,3]},"histogram_length":{"labels":["2"],"counts":[99],"bin_edges":[2,3]},"profile_duration":"0.00","elapsed_milli":3,"description":"Customer's last name. PII."},"first_order":{"name":"first_order","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":46,"distinct_p":0.46464646464646464,"min":"2023-08-15","max":"2023-11-19","duplicates":80,"duplicates_p":0.8080808080808081,"non_duplicates":19,"non_duplicates_p":0.1919191919191919,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[29,31,25,14],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":2,"description":"Date (UTC) of a customer's first order"},"most_recent_order":{"name":"most_recent_order","type":"datetime","schema_type":"DATE","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"distinct":52,"distinct_p":0.5252525252525253,"min":"2023-08-23","max":"2023-11-21","duplicates":74,"duplicates_p":0.7474747474747475,"non_duplicates":25,"non_duplicates_p":0.25252525252525254,"histogram":{"labels":["2023-08-01 - 2023-09-01","2023-09-01 - 2023-10-01","2023-10-01 - 2023-11-01","2023-11-01 - 2023-12-01"],"counts":[5,18,40,36],"bin_edges":["2023-08-01","2023-09-01","2023-10-01","2023-11-01","2023-12-01"]},"profile_duration":"0.00","elapsed_milli":1,"description":"Date (UTC) of a customer's most recent order"},"number_of_orders":{"name":"number_of_orders","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":4,"distinct_p":0.04040404040404041,"min":1,"max":5,"sum":195.0,"avg":1.9696969696969697,"stddev":0.9736795920896912,"duplicates":99,"duplicates_p":1.0,"non_duplicates":0,"non_duplicates_p":0.0,"histogram":{"labels":["1","2","3","4","5"],"counts":[33,46,15,0,5],"bin_edges":[1,2,3,4,5,6]},"p5":1,"p25":1,"p50":2,"p75":2,"p95":4,"topk":{"values":["2","1","3","5"],"counts":[46,33,15,5]},"profile_duration":"0.00","elapsed_milli":4,"description":"Count of the number of orders a customer has placed"},"customer_lifetime_value":{"name":"customer_lifetime_value","type":"integer","schema_type":"BIGINT","total":99,"samples":99,"samples_p":1,"non_nulls":99,"non_nulls_p":1.0,"nulls":0,"nulls_p":0.0,"valids":99,"valids_p":1.0,"invalids":0,"invalids_p":0.0,"zeros":0,"zeros_p":0.0,"negatives":0,"negatives_p":0.0,"positives":99,"positives_p":1.0,"distinct":35,"distinct_p":0.35353535353535354,"min":1,"max":99,"sum":3311.0,"avg":33.44444444444444,"stddev":20.596325322252156,"duplicates":91,"duplicates_p":0.9191919191919192,"non_duplicates":8,"non_duplicates_p":0.08080808080808081,"histogram":{"labels":["1 _ 3","3 _ 5","5 _ 7","7 _ 9","9 _ 11","11 _ 13","13 _ 15","15 _ 17","17 _ 19","19 _ 21","21 _ 23","23 _ 25","25 _ 27","27 _ 29","29 _ 31","31 _ 33","33 _ 35","35 _ 37","37 _ 39","39 _ 41","41 _ 43","43 _ 45","45 _ 47","47 _ 49","49 _ 51","51 _ 53","53 _ 55","55 _ 57","57 _ 59","59 _ 61","61 _ 63","63 _ 65","65 _ 67","67 _ 69","69 _ 71","71 _ 73","73 _ 75","75 _ 77","77 _ 79","79 _ 81","81 _ 83","83 _ 85","85 _ 87","87 _ 89","89 _ 91","91 _ 93","93 _ 95","95 _ 97","97 _ 99","99 _ 101"],"counts":[3,6,0,4,2,1,2,3,2,0,1,8,4,8,7,2,6,4,0,5,0,7,2,2,0,3,2,0,7,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],"bin_edges":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]},"p5":3,"p25":23,"p50":30,"p75":44,"p95":65,"topk":{"values":["27","57","3","39","44","8","23","24","26","30","33","36","29","52","65","99","2","10","14","15","32","34","43","45","47","54","64","1","4","12","16","17","18","22","28"],"counts":[7,7,5,5,5,4,4,4,4,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1]},"profile_duration":"0.01","elapsed_milli":6}},"ref_id":"model.jaffle_shop.orders","profile_duration":"0.08","elapsed_milli":77,"description":"This table has basic information about orders, as well as some derived facts based on payments"}},"metrics":[{"name":"average_order_amount_daily","ref_id":"metric.jaffle_shop.average_order_amount","label":"Average Order Amount (Daily)","description":"The average size of a jaffle order","grain":"day","dimensions":[],"headers":["date_day","average_order_amount"],"data":[["2023-10-22",28.0],["2023-10-23",19.333333333333332],["2023-10-24",15.5],["2023-10-25",null],["2023-10-26",29.0],["2023-10-27",null],["2023-10-28",3.0],["2023-10-29",30.0],["2023-10-30",19.0],["2023-10-31",null],["2023-11-01",2.0],["2023-11-02",19.0],["2023-11-03",null],["2023-11-04",14.5],["2023-11-05",4.5],["2023-11-06",null],["2023-11-07",21.666666666666668],["2023-11-08",42.5],["2023-11-09",22.0],["2023-11-10",null],["2023-11-11",2.0],["2023-11-12",19.0],["2023-11-13",null],["2023-11-14",17.0],["2023-11-15",16.5],["2023-11-16",24.0],["2023-11-17",null],["2023-11-18",17.0],["2023-11-19",12.0],["2023-11-20",null],["2023-11-21",24.0]]},{"name":"average_order_amount_monthly","ref_id":"metric.jaffle_shop.average_order_amount","label":"Average Order Amount (Monthly)","description":"The average size of a jaffle order","grain":"month","dimensions":[],"headers":["date_month","average_order_amount"],"data":[["2022-11-01",null],["2022-12-01",null],["2023-01-01",null],["2023-02-01",null],["2023-03-01",null],["2023-04-01",null],["2023-05-01",null],["2023-06-01",null],["2023-07-01",null],["2023-08-01",15.933333333333334],["2023-09-01",16.814814814814813],["2023-10-01",16.939393939393938],["2023-11-01",17.5]]},{"name":"average_order_amount_yearly","ref_id":"metric.jaffle_shop.average_order_amount","label":"Average Order Amount (Yearly)","description":"The average size of a jaffle order","grain":"year","dimensions":[],"headers":["date_year","average_order_amount"],"data":[["2013-01-01",null],["2014-01-01",null],["2015-01-01",null],["2016-01-01",null],["2017-01-01",null],["2018-01-01",null],["2019-01-01",null],["2020-01-01",null],["2021-01-01",null],["2022-01-01",null],["2023-01-01",16.88888888888889]]},{"name":"profit_daily","ref_id":"metric.jaffle_shop.profit","label":"Profit (Daily)","description":"The total money we get to take home from our jaffle business","grain":"day","dimensions":[],"headers":["date_day","profit"],"data":[["2023-10-22",21],["2023-10-23",45],["2023-10-24",20],["2023-10-25",0],["2023-10-26",0],["2023-10-27",0],["2023-10-28",3],["2023-10-29",0],["2023-10-30",15],["2023-10-31",0],["2023-11-01",2],["2023-11-02",0],["2023-11-03",0],["2023-11-04",0],["2023-11-05",0],["2023-11-06",0],["2023-11-07",0],["2023-11-08",0],["2023-11-09",0],["2023-11-10",0],["2023-11-11",0],["2023-11-12",0],["2023-11-13",0],["2023-11-14",0],["2023-11-15",0],["2023-11-16",0],["2023-11-17",0],["2023-11-18",0],["2023-11-19",0],["2023-11-20",0],["2023-11-21",0]]},{"name":"profit_monthly","ref_id":"metric.jaffle_shop.profit","label":"Profit (Monthly)","description":"The total money we get to take home from our jaffle business","grain":"month","dimensions":[],"headers":["date_month","profit"],"data":[["2022-11-01",0],["2022-12-01",0],["2023-01-01",0],["2023-02-01",0],["2023-03-01",0],["2023-04-01",0],["2023-05-01",0],["2023-06-01",0],["2023-07-01",0],["2023-08-01",157],["2023-09-01",324],["2023-10-01",371],["2023-11-01",2]]},{"name":"profit_yearly","ref_id":"metric.jaffle_shop.profit","label":"Profit (Yearly)","description":"The total money we get to take home from our jaffle business","grain":"year","dimensions":[],"headers":["date_year","profit"],"data":[["2013-01-01",0],["2014-01-01",0],["2015-01-01",0],["2016-01-01",0],["2017-01-01",0],["2018-01-01",0],["2019-01-01",0],["2020-01-01",0],["2021-01-01",0],["2022-01-01",0],["2023-01-01",854]]},{"name":"expenses_daily","ref_id":"metric.jaffle_shop.expenses","label":"Expenses (Daily)","description":"The total expenses of our jaffle business","grain":"day","dimensions":[],"headers":["date_day","expenses"],"data":[["2023-10-22",7],["2023-10-23",13],["2023-10-24",6],["2023-10-25",0],["2023-10-26",0],["2023-10-27",0],["2023-10-28",0],["2023-10-29",0],["2023-10-30",4],["2023-10-31",0],["2023-11-01",0],["2023-11-02",0],["2023-11-03",0],["2023-11-04",0],["2023-11-05",0],["2023-11-06",0],["2023-11-07",0],["2023-11-08",0],["2023-11-09",0],["2023-11-10",0],["2023-11-11",0],["2023-11-12",0],["2023-11-13",0],["2023-11-14",0],["2023-11-15",0],["2023-11-16",0],["2023-11-17",0],["2023-11-18",0],["2023-11-19",0],["2023-11-20",0],["2023-11-21",0]]},{"name":"expenses_monthly","ref_id":"metric.jaffle_shop.expenses","label":"Expenses (Monthly)","description":"The total expenses of our jaffle business","grain":"month","dimensions":[],"headers":["date_month","expenses"],"data":[["2022-11-01",0],["2022-12-01",0],["2023-01-01",0],["2023-02-01",0],["2023-03-01",0],["2023-04-01",0],["2023-05-01",0],["2023-06-01",0],["2023-07-01",0],["2023-08-01",46],["2023-09-01",94],["2023-10-01",109],["2023-11-01",0]]},{"name":"expenses_yearly","ref_id":"metric.jaffle_shop.expenses","label":"Expenses (Yearly)","description":"The total expenses of our jaffle business","grain":"year","dimensions":[],"headers":["date_year","expenses"],"data":[["2013-01-01",0],["2014-01-01",0],["2015-01-01",0],["2016-01-01",0],["2017-01-01",0],["2018-01-01",0],["2019-01-01",0],["2020-01-01",0],["2021-01-01",0],["2022-01-01",0],["2023-01-01",249]]},{"name":"revenue_daily","ref_id":"metric.jaffle_shop.revenue","label":"Revenue (Daily)","description":"The total revenue of our jaffle business","grain":"day","dimensions":[],"headers":["date_day","revenue"],"data":[["2023-10-22",28],["2023-10-23",58],["2023-10-24",26],["2023-10-25",0],["2023-10-26",0],["2023-10-27",0],["2023-10-28",3],["2023-10-29",0],["2023-10-30",19],["2023-10-31",0],["2023-11-01",2],["2023-11-02",0],["2023-11-03",0],["2023-11-04",0],["2023-11-05",0],["2023-11-06",0],["2023-11-07",0],["2023-11-08",0],["2023-11-09",0],["2023-11-10",0],["2023-11-11",0],["2023-11-12",0],["2023-11-13",0],["2023-11-14",0],["2023-11-15",0],["2023-11-16",0],["2023-11-17",0],["2023-11-18",0],["2023-11-19",0],["2023-11-20",0],["2023-11-21",0]]},{"name":"revenue_monthly","ref_id":"metric.jaffle_shop.revenue","label":"Revenue (Monthly)","description":"The total revenue of our jaffle business","grain":"month","dimensions":[],"headers":["date_month","revenue"],"data":[["2022-11-01",0],["2022-12-01",0],["2023-01-01",0],["2023-02-01",0],["2023-03-01",0],["2023-04-01",0],["2023-05-01",0],["2023-06-01",0],["2023-07-01",0],["2023-08-01",203],["2023-09-01",418],["2023-10-01",480],["2023-11-01",2]]},{"name":"revenue_yearly","ref_id":"metric.jaffle_shop.revenue","label":"Revenue (Yearly)","description":"The total revenue of our jaffle business","grain":"year","dimensions":[],"headers":["date_year","revenue"],"data":[["2013-01-01",0],["2014-01-01",0],["2015-01-01",0],["2016-01-01",0],["2017-01-01",0],["2018-01-01",0],["2019-01-01",0],["2020-01-01",0],["2021-01-01",0],["2022-01-01",0],["2023-01-01",1103]]}],"tests":[{"id":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","name":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","table":"stg_customers","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"not_null_stg_customers_customer_id","source":"dbt"},{"id":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","name":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","table":"stg_customers","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"unique_stg_customers_customer_id","source":"dbt"},{"id":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","name":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","table":"stg_orders","column":"status","status":"passed","tags":[],"message":null,"display_name":"accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned","source":"dbt"},{"id":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","name":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","table":"stg_orders","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"not_null_stg_orders_order_id","source":"dbt"},{"id":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","name":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","table":"stg_orders","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"unique_stg_orders_order_id","source":"dbt"},{"id":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","name":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","table":"stg_payments","column":"payment_method","status":"passed","tags":[],"message":null,"display_name":"accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card","source":"dbt"},{"id":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","name":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","table":"stg_payments","column":"payment_id","status":"passed","tags":[],"message":null,"display_name":"not_null_stg_payments_payment_id","source":"dbt"},{"id":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","name":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","table":"stg_payments","column":"payment_id","status":"passed","tags":[],"message":null,"display_name":"unique_stg_payments_payment_id","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92","name":"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92","table":"int_customer_order_history_joined","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"not_null_int_customer_order_history_joined_customer_id","source":"dbt"},{"id":"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9","name":"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9","table":"int_customer_order_history_joined","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"unique_int_customer_order_history_joined_customer_id","source":"dbt"},{"id":"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8","name":"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8","table":"int_order_payments_pivoted","column":"status","status":"passed","tags":[],"message":null,"display_name":"accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b","table":"int_order_payments_pivoted","column":"amount","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b","table":"int_order_payments_pivoted","column":"bank_transfer_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_bank_transfer_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2","table":"int_order_payments_pivoted","column":"coupon_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_coupon_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967","table":"int_order_payments_pivoted","column":"credit_card_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_credit_card_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4","table":"int_order_payments_pivoted","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_customer_id","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0","table":"int_order_payments_pivoted","column":"gift_card_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_gift_card_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8","name":"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8","table":"int_order_payments_pivoted","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"not_null_int_order_payments_pivoted_order_id","source":"dbt"},{"id":"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","name":"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","table":"int_customer_order_history_joined","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_","source":"dbt"},{"id":"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d","name":"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d","table":"int_order_payments_pivoted","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"unique_int_order_payments_pivoted_order_id","source":"dbt"},{"id":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","name":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","table":"orders","column":"status","status":"passed","tags":[],"message":null,"display_name":"accepted_values_orders_status__placed__shipped__completed__return_pending__returned","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_amount.106140f9fd","name":"test.jaffle_shop.not_null_orders_amount.106140f9fd","table":"orders","column":"amount","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","name":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","table":"orders","column":"bank_transfer_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_bank_transfer_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","name":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","table":"orders","column":"coupon_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_coupon_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","name":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","table":"orders","column":"credit_card_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_credit_card_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","name":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","table":"orders","column":"customer_id","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_customer_id","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","name":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","table":"orders","column":"gift_card_amount","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_gift_card_amount","source":"dbt"},{"id":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","name":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","table":"orders","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"not_null_orders_order_id","source":"dbt"},{"id":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","name":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","table":"orders","column":"order_id","status":"passed","tags":[],"message":null,"display_name":"unique_orders_order_id","source":"dbt"}],"dbt":{"manifest":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v11.json","dbt_version":"1.7.2","generated_at":"2023-11-21T03:11:43.952699Z","invocation_id":"27299d28-c71a-4f38-abcb-122142a8ab0e","env":{},"project_name":"jaffle_shop","project_id":"06e5b98c2db46f8a72cc4f66410e9b3b","user_id":"a3eff1dc-04d4-4fb0-882a-9c86858ef98a","send_anonymous_usage_stats":true,"adapter_type":"duckdb"},"nodes":{"model.jaffle_shop.int_order_payments_pivoted":{"database":"jaffle_shop","schema":"main","name":"int_order_payments_pivoted","resource_type":"model","package_name":"jaffle_shop","path":"int_order_payments_pivoted.sql","original_file_path":"models/int_order_payments_pivoted.sql","unique_id":"model.jaffle_shop.int_order_payments_pivoted","fqn":["jaffle_shop","int_order_payments_pivoted"],"alias":"int_order_payments_pivoted","checksum":{"name":"sha256","checksum":"a6b3504e09200d63863bf0a4291e009271059d72174aa3742ef5dcef0d00f6ef"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about orders, as well as some derived facts based on payments","columns":{"order_id":{"name":"order_id","description":"This is a unique identifier for an order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_id":{"name":"customer_id","description":"Foreign key to the customers table","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_date":{"name":"order_date","description":"Date (UTC) that the order was placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"amount":{"name":"amount","description":"Total amount (AUD) of the order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"credit_card_amount":{"name":"credit_card_amount","description":"Amount of the order (AUD) paid for by credit card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"coupon_amount":{"name":"coupon_amount","description":"Amount of the order (AUD) paid for by coupon","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"bank_transfer_amount":{"name":"bank_transfer_amount","description":"Amount of the order (AUD) paid for by bank transfer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"gift_card_amount":{"name":"gift_card_amount","description":"Amount of the order (AUD) paid for by gift card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/schema.yml","build_path":"target/run/jaffle_shop/models/int_order_payments_pivoted.sql","deferred":false,"unrendered_config":{"materialized":"table"},"created_at":1700535972.6780438,"relation_name":"\"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"","raw_code":"{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end)::bigint as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","language":"sql","refs":[{"name":"stg_orders","package":null,"version":null},{"name":"stg_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/int_order_payments_pivoted.sql","compiled":true,"compiled_code":"\n\nwith orders as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end)::bigint as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end)::bigint as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end)::bigint as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end)::bigint as gift_card_amount,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"model.jaffle_shop.int_customer_order_history_joined":{"database":"jaffle_shop","schema":"main","name":"int_customer_order_history_joined","resource_type":"model","package_name":"jaffle_shop","path":"int_customer_order_history_joined.sql","original_file_path":"models/int_customer_order_history_joined.sql","unique_id":"model.jaffle_shop.int_customer_order_history_joined","fqn":["jaffle_shop","int_customer_order_history_joined"],"alias":"int_customer_order_history_joined","checksum":{"name":"sha256","checksum":"d3b742d16b8ba5a1e9b7952a58fab257dd83524960d5adff6d2466a51855e41f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about a customer, as well as some derived facts based on a customer's orders","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_name":{"name":"first_name","description":"Customer's first name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"last_name":{"name":"last_name","description":"Customer's last name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"total_order_amount":{"name":"total_order_amount","description":"Total value (AUD) of a customer's orders","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/schema.yml","build_path":"target/run/jaffle_shop/models/int_customer_order_history_joined.sql","deferred":false,"unrendered_config":{"materialized":"table"},"created_at":1700535972.67637,"relation_name":"\"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"","raw_code":"with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","language":"sql","refs":[{"name":"stg_customers","package":null,"version":null},{"name":"stg_orders","package":null,"version":null},{"name":"stg_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/int_customer_order_history_joined.sql","compiled":true,"compiled_code":"with customers as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"model.jaffle_shop.metricflow_time_spine":{"database":"jaffle_shop","schema":"main","name":"metricflow_time_spine","resource_type":"model","package_name":"jaffle_shop","path":"metricflow_time_spine.sql","original_file_path":"models/metricflow_time_spine.sql","unique_id":"model.jaffle_shop.metricflow_time_spine","fqn":["jaffle_shop","metricflow_time_spine"],"alias":"metricflow_time_spine","checksum":{"name":"sha256","checksum":"4d7f7faec8711e5eed721c4282e493405808b8f08a84f880d2fac8c6ebe8d2bc"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/metricflow_time_spine.sql","deferred":false,"unrendered_config":{"materialized":"table"},"created_at":1700535972.571021,"relation_name":"\"jaffle_shop\".\"main\".\"metricflow_time_spine\"","raw_code":"{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nwith days as (\n\n    {{\n        dbt_utils.date_spine(\n            'day',\n            \"strptime('01/01/2000','%m/%d/%Y')\",\n            \"strptime('01/01/2027','%m/%d/%Y')\"\n        )\n    }}\n\n),\n\nfinal as (\n    select cast(date_day as date) as date_day\n    from days\n)\n\nselect * from final","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt_utils.date_spine"],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/models/metricflow_time_spine.sql","compiled":true,"compiled_code":"\n\nwith days as (\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9862\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    strptime('01/01/2000','%m/%d/%Y') + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= strptime('01/01/2027','%m/%d/%Y')\n\n)\n\nselect * from filtered\n\n\n\n),\n\nfinal as (\n    select cast(date_day as date) as date_day\n    from days\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"model.jaffle_shop.stg_customers":{"database":"jaffle_shop","schema":"main","name":"stg_customers","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_customers.sql","original_file_path":"models/staging/stg_customers.sql","unique_id":"model.jaffle_shop.stg_customers","fqn":["jaffle_shop","staging","stg_customers"],"alias":"stg_customers","checksum":{"name":"sha256","checksum":"80e3223cd54387e11fa16cd0f4cbe15f8ff74dcd9900b93856b9e39416178c9d"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["piperider"],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":["piperider"],"description":"","columns":{"customer_id":{"name":"customer_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":"target/run/jaffle_shop/models/staging/stg_customers.sql","deferred":false,"unrendered_config":{"materialized":"view","tags":"piperider"},"created_at":1700535972.767442,"relation_name":"\"jaffle_shop\".\"main\".\"stg_customers\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[{"name":"raw_customers","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["seed.jaffle_shop.raw_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_customers.sql","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"model.jaffle_shop.stg_payments":{"database":"jaffle_shop","schema":"main","name":"stg_payments","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_payments.sql","original_file_path":"models/staging/stg_payments.sql","unique_id":"model.jaffle_shop.stg_payments","fqn":["jaffle_shop","staging","stg_payments"],"alias":"stg_payments","checksum":{"name":"sha256","checksum":"9c1ee3bfb10e07c2dfc325d55925da0e521887136d9051768cb8acf09dc86bda"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["piperider"],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":["piperider"],"description":"","columns":{"payment_id":{"name":"payment_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"payment_method":{"name":"payment_method","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":"target/run/jaffle_shop/models/staging/stg_payments.sql","deferred":false,"unrendered_config":{"materialized":"view","tags":"piperider"},"created_at":1700535972.7683232,"relation_name":"\"jaffle_shop\".\"main\".\"stg_payments\"","raw_code":"with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[{"name":"raw_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["seed.jaffle_shop.raw_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_payments.sql","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"model.jaffle_shop.stg_orders":{"database":"jaffle_shop","schema":"main","name":"stg_orders","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_orders.sql","original_file_path":"models/staging/stg_orders.sql","unique_id":"model.jaffle_shop.stg_orders","fqn":["jaffle_shop","staging","stg_orders"],"alias":"stg_orders","checksum":{"name":"sha256","checksum":"0bc34d953a33548e7476302e43e2d1a3e97a91506ef644ce93406ac57844c767"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["piperider"],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":["piperider"],"description":"","columns":{"order_id":{"name":"order_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":"target/run/jaffle_shop/models/staging/stg_orders.sql","deferred":false,"unrendered_config":{"materialized":"view","tags":"piperider"},"created_at":1700535972.767763,"relation_name":"\"jaffle_shop\".\"main\".\"stg_orders\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n),\n\n-- Shift the order_date by the number of days since 2018-04-09 (the max order_date in the raw data)\nshift_date as (\n    \n    select\n        order_id,\n        customer_id,\n        (order_date + datediff('day', date '2018-04-09', CURRENT_DATE)::int) as order_date,\n        status        \n\n    from renamed\n)\n\nselect * from shift_date","language":"sql","refs":[{"name":"raw_orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["seed.jaffle_shop.raw_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_orders.sql","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n),\n\n-- Shift the order_date by the number of days since 2018-04-09 (the max order_date in the raw data)\nshift_date as (\n    \n    select\n        order_id,\n        customer_id,\n        (order_date + datediff('day', date '2018-04-09', CURRENT_DATE)::int) as order_date,\n        status        \n\n    from renamed\n)\n\nselect * from shift_date","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"seed.jaffle_shop.raw_customers":{"database":"jaffle_shop","schema":"main","name":"raw_customers","resource_type":"seed","package_name":"jaffle_shop","path":"raw_customers.csv","original_file_path":"seeds/raw_customers.csv","unique_id":"seed.jaffle_shop.raw_customers","fqn":["jaffle_shop","raw_customers"],"alias":"raw_customers","checksum":{"name":"sha256","checksum":"357d173dda65a741ad97d6683502286cc2655bb396ab5f4dfad12b8c39bd2a63"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"seed","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"delimiter":",","quote_columns":null},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/seeds/raw_customers.csv","deferred":false,"unrendered_config":{},"created_at":1700535972.633676,"relation_name":"\"jaffle_shop\".\"main\".\"raw_customers\"","raw_code":"","root_path":"/projects/jaffle_shop","depends_on":{"macros":[]}},"seed.jaffle_shop.raw_orders":{"database":"jaffle_shop","schema":"main","name":"raw_orders","resource_type":"seed","package_name":"jaffle_shop","path":"raw_orders.csv","original_file_path":"seeds/raw_orders.csv","unique_id":"seed.jaffle_shop.raw_orders","fqn":["jaffle_shop","raw_orders"],"alias":"raw_orders","checksum":{"name":"sha256","checksum":"ddecd7adf70a07a88b9c302aec2a03fce615b925c2c06f2d5ef99a5c97b41250"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"seed","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"delimiter":",","quote_columns":null},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/seeds/raw_orders.csv","deferred":false,"unrendered_config":{},"created_at":1700535972.634818,"relation_name":"\"jaffle_shop\".\"main\".\"raw_orders\"","raw_code":"","root_path":"/projects/jaffle_shop","depends_on":{"macros":[]}},"seed.jaffle_shop.raw_payments":{"database":"jaffle_shop","schema":"main","name":"raw_payments","resource_type":"seed","package_name":"jaffle_shop","path":"raw_payments.csv","original_file_path":"seeds/raw_payments.csv","unique_id":"seed.jaffle_shop.raw_payments","fqn":["jaffle_shop","raw_payments"],"alias":"raw_payments","checksum":{"name":"sha256","checksum":"6de0626a8db9c1750eefd1b2e17fac4c2a4b9f778eb50532d8b377b90de395e6"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"seed","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"delimiter":",","quote_columns":null},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/seeds/raw_payments.csv","deferred":false,"unrendered_config":{},"created_at":1700535972.635874,"relation_name":"\"jaffle_shop\".\"main\".\"raw_payments\"","raw_code":"","root_path":"/projects/jaffle_shop","depends_on":{"macros":[]}},"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9":{"test_metadata":{"name":"unique","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('int_customer_order_history_joined')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_int_customer_order_history_joined_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_int_customer_order_history_joined_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9","fqn":["jaffle_shop","unique_int_customer_order_history_joined_customer_id"],"alias":"unique_int_customer_order_history_joined_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/unique_int_customer_order_history_joined_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.748615,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_customer_order_history_joined","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_customer_order_history_joined"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_int_customer_order_history_joined_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.int_customer_order_history_joined","attached_node":"model.jaffle_shop.int_customer_order_history_joined"},"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('int_customer_order_history_joined')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_customer_order_history_joined_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_customer_order_history_joined_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92","fqn":["jaffle_shop","not_null_int_customer_order_history_joined_customer_id"],"alias":"not_null_int_customer_order_history_joined_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_customer_order_history_joined_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7496269,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_customer_order_history_joined","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_customer_order_history_joined"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_customer_order_history_joined_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.int_customer_order_history_joined","attached_node":"model.jaffle_shop.int_customer_order_history_joined"},"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d":{"test_metadata":{"name":"unique","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_int_order_payments_pivoted_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_int_order_payments_pivoted_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d","fqn":["jaffle_shop","unique_int_order_payments_pivoted_order_id"],"alias":"unique_int_order_payments_pivoted_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/unique_int_order_payments_pivoted_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7504551,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_int_order_payments_pivoted_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_order_id"],"alias":"not_null_int_order_payments_pivoted_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.751267,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_customer_id"],"alias":"not_null_int_order_payments_pivoted_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7520661,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d":{"test_metadata":{"name":"relationships","kwargs":{"to":"ref('int_customer_order_history_joined')","field":"customer_id","column_name":"customer_id","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_","resource_type":"test","package_name":"jaffle_shop","path":"relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","fqn":["jaffle_shop","relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_"],"alias":"relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924.sql","deferred":false,"unrendered_config":{"alias":"relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924"},"created_at":1700535972.753036,"relation_name":null,"raw_code":"{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924\") }}","language":"sql","refs":[{"name":"int_customer_order_history_joined","package":null,"version":null},{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_relationships","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_customer_order_history_joined","model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/relationships_int_order_paymen_0a5fcb40aa1fc18dbd520bbf52b44924.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8":{"test_metadata":{"name":"accepted_values","kwargs":{"values":["placed","shipped","completed","return_pending","returned"],"column_name":"status","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8","fqn":["jaffle_shop","accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2.sql","deferred":false,"unrendered_config":{"alias":"accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2"},"created_at":1700535972.758632,"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2\") }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/accepted_values_int_order_paym_9fe2727f303988bdfad8f1fd2813d0f2.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"status","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"amount","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_amount"],"alias":"not_null_int_order_payments_pivoted_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7632792,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"amount","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"credit_card_amount","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_credit_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_credit_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_credit_card_amount"],"alias":"not_null_int_order_payments_pivoted_credit_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_credit_card_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.76411,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_credit_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere credit_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"credit_card_amount","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"coupon_amount","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_coupon_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_coupon_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_coupon_amount"],"alias":"not_null_int_order_payments_pivoted_coupon_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_coupon_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7649028,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_coupon_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere coupon_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"coupon_amount","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"bank_transfer_amount","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_bank_transfer_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_bank_transfer_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_bank_transfer_amount"],"alias":"not_null_int_order_payments_pivoted_bank_transfer_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_bank_transfer_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.765834,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_bank_transfer_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere bank_transfer_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"bank_transfer_amount","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"gift_card_amount","model":"{{ get_where_subquery(ref('int_order_payments_pivoted')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_int_order_payments_pivoted_gift_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_int_order_payments_pivoted_gift_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0","fqn":["jaffle_shop","not_null_int_order_payments_pivoted_gift_card_amount"],"alias":"not_null_int_order_payments_pivoted_gift_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_gift_card_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.766625,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.int_order_payments_pivoted"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_int_order_payments_pivoted_gift_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere gift_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"gift_card_amount","file_key_name":"models.int_order_payments_pivoted","attached_node":"model.jaffle_shop.int_order_payments_pivoted"},"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":{"test_metadata":{"name":"unique","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('stg_customers')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","fqn":["jaffle_shop","staging","unique_stg_customers_customer_id"],"alias":"unique_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.768735,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_customers","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.stg_customers","attached_node":"model.jaffle_shop.stg_customers"},"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('stg_customers')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","fqn":["jaffle_shop","staging","not_null_stg_customers_customer_id"],"alias":"not_null_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7695732,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_customers","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"stg_customers\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.stg_customers","attached_node":"model.jaffle_shop.stg_customers"},"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":{"test_metadata":{"name":"unique","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('stg_orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","fqn":["jaffle_shop","staging","unique_stg_orders_order_id"],"alias":"unique_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7705479,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.stg_orders","attached_node":"model.jaffle_shop.stg_orders"},"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('stg_orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","fqn":["jaffle_shop","staging","not_null_stg_orders_order_id"],"alias":"not_null_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.771358,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"stg_orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.stg_orders","attached_node":"model.jaffle_shop.stg_orders"},"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":{"test_metadata":{"name":"accepted_values","kwargs":{"values":["placed","shipped","completed","return_pending","returned"],"column_name":"status","model":"{{ get_where_subquery(ref('stg_orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","fqn":["jaffle_shop","staging","accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","deferred":false,"unrendered_config":{"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"},"created_at":1700535972.772171,"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}","language":"sql","refs":[{"name":"stg_orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"status","file_key_name":"models.stg_orders","attached_node":"model.jaffle_shop.stg_orders"},"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":{"test_metadata":{"name":"unique","kwargs":{"column_name":"payment_id","model":"{{ get_where_subquery(ref('stg_payments')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","fqn":["jaffle_shop","staging","unique_stg_payments_payment_id"],"alias":"unique_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.774315,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"payment_id","file_key_name":"models.stg_payments","attached_node":"model.jaffle_shop.stg_payments"},"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"payment_id","model":"{{ get_where_subquery(ref('stg_payments')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","fqn":["jaffle_shop","staging","not_null_stg_payments_payment_id"],"alias":"not_null_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql","deferred":false,"unrendered_config":{},"created_at":1700535972.7751198,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"stg_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect payment_id\nfrom \"jaffle_shop\".\"main\".\"stg_payments\"\nwhere payment_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"payment_id","file_key_name":"models.stg_payments","attached_node":"model.jaffle_shop.stg_payments"},"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":{"test_metadata":{"name":"accepted_values","kwargs":{"values":["credit_card","coupon","bank_transfer","gift_card"],"column_name":"payment_method","model":"{{ get_where_subquery(ref('stg_payments')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","fqn":["jaffle_shop","staging","accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"],"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","deferred":false,"unrendered_config":{"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"},"created_at":1700535972.775927,"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}","language":"sql","refs":[{"name":"stg_payments","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"payment_method","file_key_name":"models.stg_payments","attached_node":"model.jaffle_shop.stg_payments"},"model.jaffle_shop.orders":{"database":"jaffle_shop","schema":"main","name":"orders","resource_type":"model","package_name":"jaffle_shop","path":"marts/orders.sql","original_file_path":"models/marts/orders.sql","unique_id":"model.jaffle_shop.orders","fqn":["jaffle_shop","marts","orders"],"alias":"orders","checksum":{"name":"sha256","checksum":"72daa5bd3383a814f0315bff00159d5fb30f62b5f8d0955934cf041c605052a1"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["piperider"],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":null},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":["piperider"],"description":"This table has basic information about orders, as well as some derived facts based on payments","columns":{"order_id":{"name":"order_id","description":"This is a unique identifier for an order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_date":{"name":"order_date","description":"Date (UTC) that the order was placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"amount":{"name":"amount","description":"Total amount (AUD) of the order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"credit_card_amount":{"name":"credit_card_amount","description":"Amount of the order (AUD) paid for by credit card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"coupon_amount":{"name":"coupon_amount","description":"Amount of the order (AUD) paid for by coupon","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"bank_transfer_amount":{"name":"bank_transfer_amount","description":"Amount of the order (AUD) paid for by bank transfer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"gift_card_amount":{"name":"gift_card_amount","description":"Amount of the order (AUD) paid for by gift card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_name":{"name":"first_name","description":"Customer's first name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"last_name":{"name":"last_name","description":"Customer's last name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"total_order_amount":{"name":"total_order_amount","description":"Total value (AUD) of a customer's orders","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":"jaffle_shop://models/marts/orders.yml","build_path":"target/run/jaffle_shop/models/marts/orders.sql","deferred":false,"unrendered_config":{"materialized":"table","tags":"piperider"},"created_at":1700536057.5224462,"relation_name":"\"jaffle_shop\".\"main\".\"orders\"","raw_code":"with orders as (\n\n    select * from {{ ref('int_order_payments_pivoted') }}\n\n)\n,\ncustomers as (\n\n    select * from {{ ref('int_customer_order_history_joined') }}\n\n)\n,\nfinal as (\n\n    select \n        *\n    from orders \n    left join customers using (customer_id)\n\n)\n\nselect * from final","language":"sql","refs":[{"name":"int_order_payments_pivoted","package":null,"version":null},{"name":"int_customer_order_history_joined","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.int_order_payments_pivoted","model.jaffle_shop.int_customer_order_history_joined"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.sql","compiled":true,"compiled_code":"with orders as (\n\n    select * from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n\n)\n,\ncustomers as (\n\n    select * from \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\n\n)\n,\nfinal as (\n\n    select \n        *\n    from orders \n    left join customers using (customer_id)\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null},"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":{"test_metadata":{"name":"unique","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"unique_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_orders_order_id.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","fqn":["jaffle_shop","marts","unique_orders_order_id"],"alias":"unique_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/unique_orders_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.56206,"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/unique_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_order_id.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","fqn":["jaffle_shop","marts","not_null_orders_order_id"],"alias":"not_null_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_order_id.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.5630798,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"order_id","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_customer_id.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","fqn":["jaffle_shop","marts","not_null_orders_customer_id"],"alias":"not_null_orders_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_customer_id.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.563923,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"customer_id","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":{"test_metadata":{"name":"accepted_values","kwargs":{"values":["placed","shipped","completed","return_pending","returned"],"column_name":"status","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"accepted_values_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","fqn":["jaffle_shop","marts","accepted_values_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","deferred":false,"unrendered_config":{"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"},"created_at":1700536057.56476,"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"status","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_amount.106140f9fd":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"amount","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_amount.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_amount.106140f9fd","fqn":["jaffle_shop","marts","not_null_orders_amount"],"alias":"not_null_orders_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.571309,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"amount","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"credit_card_amount","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_credit_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_credit_card_amount.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","fqn":["jaffle_shop","marts","not_null_orders_credit_card_amount"],"alias":"not_null_orders_credit_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_credit_card_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.572136,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_credit_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere credit_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"credit_card_amount","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"coupon_amount","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_coupon_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_coupon_amount.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","fqn":["jaffle_shop","marts","not_null_orders_coupon_amount"],"alias":"not_null_orders_coupon_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_coupon_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.5729458,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_coupon_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere coupon_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"coupon_amount","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"bank_transfer_amount","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_bank_transfer_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_bank_transfer_amount.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","fqn":["jaffle_shop","marts","not_null_orders_bank_transfer_amount"],"alias":"not_null_orders_bank_transfer_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_bank_transfer_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.573749,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_bank_transfer_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere bank_transfer_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"bank_transfer_amount","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"},"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":{"test_metadata":{"name":"not_null","kwargs":{"column_name":"gift_card_amount","model":"{{ get_where_subquery(ref('orders')) }}"},"namespace":null},"database":"jaffle_shop","schema":"dbt_test__audit","name":"not_null_orders_gift_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_gift_card_amount.sql","original_file_path":"models/marts/orders.yml","unique_id":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","fqn":["jaffle_shop","marts","not_null_orders_gift_card_amount"],"alias":"not_null_orders_gift_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":"target/run/jaffle_shop/models/marts/orders.yml/not_null_orders_gift_card_amount.sql","deferred":false,"unrendered_config":{},"created_at":1700536057.574549,"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[{"name":"orders","package":null,"version":null}],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery","macro.dbt.should_store_failures","macro.dbt.statement"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/marts/orders.yml/not_null_orders_gift_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere gift_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"column_name":"gift_card_amount","file_key_name":"models.orders","attached_node":"model.jaffle_shop.orders"}},"sources":{},"macros":{"macro.jaffle_shop.generate_schema_name":{"name":"generate_schema_name","resource_type":"macro","package_name":"jaffle_shop","path":"macros/generate_schema_name.sql","original_file_path":"macros/generate_schema_name.sql","unique_id":"macro.jaffle_shop.generate_schema_name","macro_sql":"{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.005273,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_binding_char":{"name":"duckdb__get_binding_char","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_binding_char","macro_sql":"{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.00677,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_batch_size":{"name":"duckdb__get_batch_size","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_batch_size","macro_sql":"{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.006895,"supported_languages":null},"macro.dbt_duckdb.duckdb__load_csv_rows":{"name":"duckdb__load_csv_rows","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__load_csv_rows","macro_sql":"{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0091,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_merge_sql":{"name":"duckdb__snapshot_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_merge_sql","macro_sql":"{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.009952,"supported_languages":null},"macro.dbt_duckdb.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0103831,"supported_languages":null},"macro.dbt_duckdb.duckdb__post_snapshot":{"name":"duckdb__post_snapshot","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__post_snapshot","macro_sql":"{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.010539,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_catalog":{"name":"duckdb__get_catalog","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/catalog.sql","original_file_path":"macros/catalog.sql","unique_id":"macro.dbt_duckdb.duckdb__get_catalog","macro_sql":"{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0111501,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_schema":{"name":"duckdb__create_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_schema","macro_sql":"{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.017694,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_schema":{"name":"duckdb__drop_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_schema","macro_sql":"{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0178711,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_schemas":{"name":"duckdb__list_schemas","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_schemas","macro_sql":"{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.018134,"supported_languages":null},"macro.dbt_duckdb.duckdb__check_schema_exists":{"name":"duckdb__check_schema_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__check_schema_exists","macro_sql":"{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.01838,"supported_languages":null},"macro.dbt_duckdb.get_column_names":{"name":"get_column_names","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.get_column_names","macro_sql":"{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0187268,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_table_as":{"name":"duckdb__create_table_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_table_as","macro_sql":"{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt_duckdb.get_column_names","macro.dbt.get_select_subquery","macro.dbt_duckdb.py_write_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0197608,"supported_languages":null},"macro.dbt_duckdb.py_write_table":{"name":"py_write_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.py_write_table","macro_sql":"{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.019926,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_view_as":{"name":"duckdb__create_view_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_view_as","macro_sql":"{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0203211,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_columns_in_relation":{"name":"duckdb__get_columns_in_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_columns_in_relation","macro_sql":"{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.sql_convert_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0208058,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_relations_without_caching":{"name":"duckdb__list_relations_without_caching","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_relations_without_caching","macro_sql":"{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.021133,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_relation":{"name":"duckdb__drop_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_relation","macro_sql":"{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.021337,"supported_languages":null},"macro.dbt_duckdb.duckdb__rename_relation":{"name":"duckdb__rename_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__rename_relation","macro_sql":"{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.021632,"supported_languages":null},"macro.dbt_duckdb.duckdb__make_temp_relation":{"name":"duckdb__make_temp_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__make_temp_relation","macro_sql":"{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.py_current_timestring"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022031,"supported_languages":null},"macro.dbt_duckdb.duckdb__current_timestamp":{"name":"duckdb__current_timestamp","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__current_timestamp","macro_sql":"{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022107,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_string_as_time":{"name":"duckdb__snapshot_string_as_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_string_as_time","macro_sql":"{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022274,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_get_time":{"name":"duckdb__snapshot_get_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_get_time","macro_sql":"{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0223732,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_incremental_default_sql":{"name":"duckdb__get_incremental_default_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_incremental_default_sql","macro_sql":"{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022513,"supported_languages":null},"macro.dbt_duckdb.location_exists":{"name":"location_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.location_exists","macro_sql":"{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022658,"supported_languages":null},"macro.dbt_duckdb.write_to_file":{"name":"write_to_file","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.write_to_file","macro_sql":"{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.022869,"supported_languages":null},"macro.dbt_duckdb.store_relation":{"name":"store_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.store_relation","macro_sql":"{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.023155,"supported_languages":null},"macro.dbt_duckdb.render_write_options":{"name":"render_write_options","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.render_write_options","macro_sql":"{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0240908,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql":{"name":"duckdb__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/incremental_helper.sql","original_file_path":"macros/incremental_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql","macro_sql":"{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.025994,"supported_languages":null},"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns":{"name":"duckdb__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/columns.sql","original_file_path":"macros/columns.sql","unique_id":"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns","macro_sql":"{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.026908,"supported_languages":null},"macro.dbt_duckdb.materialization_table_duckdb":{"name":"materialization_table_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/table.sql","original_file_path":"macros/materializations/table.sql","unique_id":"macro.dbt_duckdb.materialization_table_duckdb","macro_sql":"{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0295,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_external_duckdb":{"name":"materialization_external_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/external.sql","original_file_path":"macros/materializations/external.sql","unique_id":"macro.dbt_duckdb.materialization_external_duckdb","macro_sql":"{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt_duckdb.write_to_file","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt_duckdb.store_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0342422,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_incremental_duckdb":{"name":"materialization_incremental_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/incremental.sql","original_file_path":"macros/materializations/incremental.sql","unique_id":"macro.dbt_duckdb.materialization_incremental_duckdb","macro_sql":"{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.create_table_as","macro.dbt.statement","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0394702,"supported_languages":["sql","python"]},"macro.dbt_duckdb.duckdb__dateadd":{"name":"duckdb__dateadd","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt_duckdb.duckdb__dateadd","macro_sql":"{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0397031,"supported_languages":null},"macro.dbt_duckdb.duckdb__listagg":{"name":"duckdb__listagg","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt_duckdb.duckdb__listagg","macro_sql":"{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0402718,"supported_languages":null},"macro.dbt_duckdb.duckdb__datediff":{"name":"duckdb__datediff","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt_duckdb.duckdb__datediff","macro_sql":"{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0431712,"supported_languages":null},"macro.dbt_duckdb.duckdb__any_value":{"name":"duckdb__any_value","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt_duckdb.duckdb__any_value","macro_sql":"{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0433102,"supported_languages":null},"macro.dbt_duckdb.register_upstream_external_models":{"name":"register_upstream_external_models","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/upstream.sql","original_file_path":"macros/utils/upstream.sql","unique_id":"macro.dbt_duckdb.register_upstream_external_models","macro_sql":"{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.045592,"supported_languages":null},"macro.dbt_duckdb.duckdb__split_part":{"name":"duckdb__split_part","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/splitpart.sql","original_file_path":"macros/utils/splitpart.sql","unique_id":"macro.dbt_duckdb.duckdb__split_part","macro_sql":"{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.045804,"supported_languages":null},"macro.dbt_duckdb.duckdb__last_day":{"name":"duckdb__last_day","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/lastday.sql","original_file_path":"macros/utils/lastday.sql","unique_id":"macro.dbt_duckdb.duckdb__last_day","macro_sql":"{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc","macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0462809,"supported_languages":null},"macro.dbt_duckdb.external_location":{"name":"external_location","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/external_location.sql","original_file_path":"macros/utils/external_location.sql","unique_id":"macro.dbt_duckdb.external_location","macro_sql":"{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.046804,"supported_languages":null},"macro.dbt.run_hooks":{"name":"run_hooks","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.run_hooks","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.047803,"supported_languages":null},"macro.dbt.make_hook_config":{"name":"make_hook_config","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.make_hook_config","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.047992,"supported_languages":null},"macro.dbt.before_begin":{"name":"before_begin","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.before_begin","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0481331,"supported_languages":null},"macro.dbt.in_transaction":{"name":"in_transaction","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.in_transaction","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0482671,"supported_languages":null},"macro.dbt.after_commit":{"name":"after_commit","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.after_commit","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0484009,"supported_languages":null},"macro.dbt.set_sql_header":{"name":"set_sql_header","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.set_sql_header","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.048739,"supported_languages":null},"macro.dbt.should_full_refresh":{"name":"should_full_refresh","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_full_refresh","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.049022,"supported_languages":null},"macro.dbt.should_store_failures":{"name":"should_store_failures","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_store_failures","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.049311,"supported_languages":null},"macro.dbt.snapshot_merge_sql":{"name":"snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.snapshot_merge_sql","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.049707,"supported_languages":null},"macro.dbt.default__snapshot_merge_sql":{"name":"default__snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.default__snapshot_merge_sql","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.049964,"supported_languages":null},"macro.dbt.strategy_dispatch":{"name":"strategy_dispatch","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.strategy_dispatch","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.05317,"supported_languages":null},"macro.dbt.snapshot_hash_arguments":{"name":"snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_hash_arguments","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0533388,"supported_languages":null},"macro.dbt.default__snapshot_hash_arguments":{"name":"default__snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_hash_arguments","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.053557,"supported_languages":null},"macro.dbt.snapshot_timestamp_strategy":{"name":"snapshot_timestamp_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_timestamp_strategy","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.054244,"supported_languages":null},"macro.dbt.snapshot_string_as_time":{"name":"snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_string_as_time","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.054403,"supported_languages":null},"macro.dbt.default__snapshot_string_as_time":{"name":"default__snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_string_as_time","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.054568,"supported_languages":null},"macro.dbt.snapshot_check_all_get_existing_columns":{"name":"snapshot_check_all_get_existing_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.055899,"supported_languages":null},"macro.dbt.snapshot_check_strategy":{"name":"snapshot_check_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_strategy","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time","macro.dbt.snapshot_check_all_get_existing_columns","macro.dbt.get_true_sql","macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.057181,"supported_languages":null},"macro.dbt.create_columns":{"name":"create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.create_columns","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.06071,"supported_languages":null},"macro.dbt.default__create_columns":{"name":"default__create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__create_columns","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.060981,"supported_languages":null},"macro.dbt.post_snapshot":{"name":"post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.post_snapshot","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.061143,"supported_languages":null},"macro.dbt.default__post_snapshot":{"name":"default__post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__post_snapshot","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.061225,"supported_languages":null},"macro.dbt.get_true_sql":{"name":"get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.get_true_sql","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_true_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.061365,"supported_languages":null},"macro.dbt.default__get_true_sql":{"name":"default__get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__get_true_sql","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0614731,"supported_languages":null},"macro.dbt.snapshot_staging_table":{"name":"snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.snapshot_staging_table","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_staging_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.061667,"supported_languages":null},"macro.dbt.default__snapshot_staging_table":{"name":"default__snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__snapshot_staging_table","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0625122,"supported_languages":null},"macro.dbt.build_snapshot_table":{"name":"build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_table","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__build_snapshot_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.062711,"supported_languages":null},"macro.dbt.default__build_snapshot_table":{"name":"default__build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__build_snapshot_table","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.062948,"supported_languages":null},"macro.dbt.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.063359,"supported_languages":null},"macro.dbt.materialization_snapshot_default":{"name":"materialization_snapshot_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot.sql","original_file_path":"macros/materializations/snapshots/snapshot.sql","unique_id":"macro.dbt.materialization_snapshot_default","macro_sql":"{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.get_or_create_relation","macro.dbt.run_hooks","macro.dbt.strategy_dispatch","macro.dbt.build_snapshot_table","macro.dbt.create_table_as","macro.dbt.build_snapshot_staging_table","macro.dbt.create_columns","macro.dbt.snapshot_merge_sql","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes","macro.dbt.post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0688891,"supported_languages":["sql"]},"macro.dbt.materialization_test_default":{"name":"materialization_test_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/test.sql","original_file_path":"macros/materializations/tests/test.sql","unique_id":"macro.dbt.materialization_test_default","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.should_store_failures","macro.dbt.statement","macro.dbt.get_create_sql","macro.dbt.get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.07139,"supported_languages":["sql"]},"macro.dbt.get_test_sql":{"name":"get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.get_test_sql","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.071809,"supported_languages":null},"macro.dbt.default__get_test_sql":{"name":"default__get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.default__get_test_sql","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.072098,"supported_languages":null},"macro.dbt.get_where_subquery":{"name":"get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.get_where_subquery","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_where_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.072441,"supported_languages":null},"macro.dbt.default__get_where_subquery":{"name":"default__get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.default__get_where_subquery","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.072795,"supported_languages":null},"macro.dbt.materialization_materialized_view_default":{"name":"materialization_materialized_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialization_materialized_view_default","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.materialized_view_setup","macro.dbt.materialized_view_get_build_sql","macro.dbt.materialized_view_execute_no_op","macro.dbt.materialized_view_execute_build_sql","macro.dbt.materialized_view_teardown"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0770628,"supported_languages":["sql"]},"macro.dbt.materialized_view_setup":{"name":"materialized_view_setup","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_setup","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0774379,"supported_languages":null},"macro.dbt.materialized_view_teardown":{"name":"materialized_view_teardown","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_teardown","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.077678,"supported_languages":null},"macro.dbt.materialized_view_get_build_sql":{"name":"materialized_view_get_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_get_build_sql","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.get_create_materialized_view_as_sql","macro.dbt.get_replace_sql","macro.dbt.get_materialized_view_configuration_changes","macro.dbt.refresh_materialized_view","macro.dbt.get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.078911,"supported_languages":null},"macro.dbt.materialized_view_execute_no_op":{"name":"materialized_view_execute_no_op","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_no_op","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0791318,"supported_languages":null},"macro.dbt.materialized_view_execute_build_sql":{"name":"materialized_view_execute_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_build_sql","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0797591,"supported_languages":null},"macro.dbt.materialization_view_default":{"name":"materialization_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/view.sql","original_file_path":"macros/materializations/models/view.sql","unique_id":"macro.dbt.materialization_view_default","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.run_hooks","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.082593,"supported_languages":["sql"]},"macro.dbt.materialization_table_default":{"name":"materialization_table_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/table.sql","original_file_path":"macros/materializations/models/table.sql","unique_id":"macro.dbt.materialization_table_default","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.get_create_table_as_sql","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0853481,"supported_languages":["sql"]},"macro.dbt.get_quoted_csv":{"name":"get_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_quoted_csv","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0867698,"supported_languages":null},"macro.dbt.diff_columns":{"name":"diff_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_columns","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.087292,"supported_languages":null},"macro.dbt.diff_column_data_types":{"name":"diff_column_data_types","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_column_data_types","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0879302,"supported_languages":null},"macro.dbt.get_merge_update_columns":{"name":"get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_merge_update_columns","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.088159,"supported_languages":null},"macro.dbt.default__get_merge_update_columns":{"name":"default__get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.default__get_merge_update_columns","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.08884,"supported_languages":null},"macro.dbt.get_merge_sql":{"name":"get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_merge_sql","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0942998,"supported_languages":null},"macro.dbt.default__get_merge_sql":{"name":"default__get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_merge_sql","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv","macro.dbt.get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.095825,"supported_languages":null},"macro.dbt.get_delete_insert_merge_sql":{"name":"get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_delete_insert_merge_sql","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.096083,"supported_languages":null},"macro.dbt.default__get_delete_insert_merge_sql":{"name":"default__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_delete_insert_merge_sql","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.097035,"supported_languages":null},"macro.dbt.get_insert_overwrite_merge_sql":{"name":"get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_insert_overwrite_merge_sql","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.097297,"supported_languages":null},"macro.dbt.default__get_insert_overwrite_merge_sql":{"name":"default__get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.097931,"supported_languages":null},"macro.dbt.is_incremental":{"name":"is_incremental","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/is_incremental.sql","original_file_path":"macros/materializations/models/incremental/is_incremental.sql","unique_id":"macro.dbt.is_incremental","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.0985239,"supported_languages":null},"macro.dbt.get_incremental_append_sql":{"name":"get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_append_sql","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.099317,"supported_languages":null},"macro.dbt.default__get_incremental_append_sql":{"name":"default__get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_append_sql","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_into_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.099543,"supported_languages":null},"macro.dbt.get_incremental_delete_insert_sql":{"name":"get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_delete_insert_sql","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.099724,"supported_languages":null},"macro.dbt.default__get_incremental_delete_insert_sql":{"name":"default__get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.100008,"supported_languages":null},"macro.dbt.get_incremental_merge_sql":{"name":"get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_merge_sql","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.126698,"supported_languages":null},"macro.dbt.default__get_incremental_merge_sql":{"name":"default__get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_merge_sql","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.127031,"supported_languages":null},"macro.dbt.get_incremental_insert_overwrite_sql":{"name":"get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_insert_overwrite_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.127228,"supported_languages":null},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"name":"default__get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.127497,"supported_languages":null},"macro.dbt.get_incremental_default_sql":{"name":"get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_default_sql","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.127684,"supported_languages":null},"macro.dbt.default__get_incremental_default_sql":{"name":"default__get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_default_sql","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.12783,"supported_languages":null},"macro.dbt.get_insert_into_sql":{"name":"get_insert_into_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_insert_into_sql","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1281018,"supported_languages":null},"macro.dbt.materialization_incremental_default":{"name":"materialization_incremental_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/incremental.sql","original_file_path":"macros/materializations/models/incremental/incremental.sql","unique_id":"macro.dbt.materialization_incremental_default","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.get_create_table_as_sql","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.132836,"supported_languages":["sql"]},"macro.dbt.incremental_validate_on_schema_change":{"name":"incremental_validate_on_schema_change","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.incremental_validate_on_schema_change","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.137697,"supported_languages":null},"macro.dbt.check_for_schema_changes":{"name":"check_for_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.check_for_schema_changes","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.diff_columns","macro.dbt.diff_column_data_types"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.13887,"supported_languages":null},"macro.dbt.sync_column_schemas":{"name":"sync_column_schemas","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.sync_column_schemas","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.alter_relation_add_remove_columns","macro.dbt.alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.140012,"supported_languages":null},"macro.dbt.process_schema_changes":{"name":"process_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.process_schema_changes","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.check_for_schema_changes","macro.dbt.sync_column_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1408262,"supported_languages":null},"macro.dbt.can_clone_table":{"name":"can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.can_clone_table","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__can_clone_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.14106,"supported_languages":null},"macro.dbt.default__can_clone_table":{"name":"default__can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.default__can_clone_table","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.141175,"supported_languages":null},"macro.dbt.create_or_replace_clone":{"name":"create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.create_or_replace_clone","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_or_replace_clone"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1414568,"supported_languages":null},"macro.dbt.default__create_or_replace_clone":{"name":"default__create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.default__create_or_replace_clone","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.14159,"supported_languages":null},"macro.dbt.materialization_clone_default":{"name":"materialization_clone_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/clone.sql","original_file_path":"macros/materializations/models/clone/clone.sql","unique_id":"macro.dbt.materialization_clone_default","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.can_clone_table","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.create_or_replace_clone","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.144929,"supported_languages":["sql"]},"macro.dbt.materialization_seed_default":{"name":"materialization_seed_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/seed.sql","original_file_path":"macros/materializations/seeds/seed.sql","unique_id":"macro.dbt.materialization_seed_default","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.run_hooks","macro.dbt.reset_csv_table","macro.dbt.create_csv_table","macro.dbt.load_csv_rows","macro.dbt.noop_statement","macro.dbt.get_csv_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1479812,"supported_languages":["sql"]},"macro.dbt.create_csv_table":{"name":"create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.create_csv_table","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.152283,"supported_languages":null},"macro.dbt.default__create_csv_table":{"name":"default__create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__create_csv_table","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1531541,"supported_languages":null},"macro.dbt.reset_csv_table":{"name":"reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.reset_csv_table","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__reset_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.153381,"supported_languages":null},"macro.dbt.default__reset_csv_table":{"name":"default__reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__reset_csv_table","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.15384,"supported_languages":null},"macro.dbt.get_csv_sql":{"name":"get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_csv_sql","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_csv_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.15403,"supported_languages":null},"macro.dbt.default__get_csv_sql":{"name":"default__get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_csv_sql","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1541572,"supported_languages":null},"macro.dbt.get_binding_char":{"name":"get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_binding_char","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1542962,"supported_languages":null},"macro.dbt.default__get_binding_char":{"name":"default__get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_binding_char","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.154409,"supported_languages":null},"macro.dbt.get_batch_size":{"name":"get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_batch_size","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_batch_size"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1545632,"supported_languages":null},"macro.dbt.default__get_batch_size":{"name":"default__get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_batch_size","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.15468,"supported_languages":null},"macro.dbt.get_seed_column_quoted_csv":{"name":"get_seed_column_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_seed_column_quoted_csv","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.155135,"supported_languages":null},"macro.dbt.load_csv_rows":{"name":"load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.load_csv_rows","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__load_csv_rows"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1553202,"supported_languages":null},"macro.dbt.default__load_csv_rows":{"name":"default__load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__load_csv_rows","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.156536,"supported_languages":null},"macro.dbt.generate_alias_name":{"name":"generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.generate_alias_name","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_alias_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.156933,"supported_languages":null},"macro.dbt.default__generate_alias_name":{"name":"default__generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.default__generate_alias_name","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.157301,"supported_languages":null},"macro.dbt.generate_schema_name":{"name":"generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.157783,"supported_languages":null},"macro.dbt.default__generate_schema_name":{"name":"default__generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.default__generate_schema_name","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.158035,"supported_languages":null},"macro.dbt.generate_schema_name_for_env":{"name":"generate_schema_name_for_env","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name_for_env","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.158315,"supported_languages":null},"macro.dbt.generate_database_name":{"name":"generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.generate_database_name","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_database_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.158682,"supported_languages":null},"macro.dbt.default__generate_database_name":{"name":"default__generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.default__generate_database_name","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.158947,"supported_languages":null},"macro.dbt.get_drop_sql":{"name":"get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.get_drop_sql","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.159585,"supported_languages":null},"macro.dbt.default__get_drop_sql":{"name":"default__get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__get_drop_sql","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.drop_view","macro.dbt.drop_table","macro.dbt.drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.159942,"supported_languages":null},"macro.dbt.drop_relation":{"name":"drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1601229,"supported_languages":null},"macro.dbt.default__drop_relation":{"name":"default__drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__drop_relation","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.160314,"supported_languages":null},"macro.dbt.drop_relation_if_exists":{"name":"drop_relation_if_exists","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation_if_exists","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.160502,"supported_languages":null},"macro.dbt.get_replace_sql":{"name":"get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.get_replace_sql","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.16122,"supported_languages":null},"macro.dbt.default__get_replace_sql":{"name":"default__get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.default__get_replace_sql","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_replace_view_sql","macro.dbt.get_replace_table_sql","macro.dbt.get_replace_materialized_view_sql","macro.dbt.get_create_intermediate_sql","macro.dbt.get_create_backup_sql","macro.dbt.get_rename_intermediate_sql","macro.dbt.get_drop_backup_sql","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1624498,"supported_languages":null},"macro.dbt.get_create_intermediate_sql":{"name":"get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.get_create_intermediate_sql","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.162816,"supported_languages":null},"macro.dbt.default__get_create_intermediate_sql":{"name":"default__get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.default__get_create_intermediate_sql","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.163059,"supported_languages":null},"macro.dbt.get_drop_backup_sql":{"name":"get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.get_drop_backup_sql","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.163359,"supported_languages":null},"macro.dbt.default__get_drop_backup_sql":{"name":"default__get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.default__get_drop_backup_sql","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1635609,"supported_languages":null},"macro.dbt.get_rename_sql":{"name":"get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.get_rename_sql","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.164211,"supported_languages":null},"macro.dbt.default__get_rename_sql":{"name":"default__get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__get_rename_sql","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.get_rename_view_sql","macro.dbt.get_rename_table_sql","macro.dbt.get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.16463,"supported_languages":null},"macro.dbt.rename_relation":{"name":"rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.rename_relation","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__rename_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.164832,"supported_languages":null},"macro.dbt.default__rename_relation":{"name":"default__rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__rename_relation","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.165108,"supported_languages":null},"macro.dbt.get_create_backup_sql":{"name":"get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.get_create_backup_sql","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.165431,"supported_languages":null},"macro.dbt.default__get_create_backup_sql":{"name":"default__get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.default__get_create_backup_sql","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1656919,"supported_languages":null},"macro.dbt.get_create_sql":{"name":"get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.get_create_sql","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.166125,"supported_languages":null},"macro.dbt.default__get_create_sql":{"name":"default__get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.default__get_create_sql","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.get_create_view_as_sql","macro.dbt.get_create_table_as_sql","macro.dbt.get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.166553,"supported_languages":null},"macro.dbt.get_rename_intermediate_sql":{"name":"get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.get_rename_intermediate_sql","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.16686,"supported_languages":null},"macro.dbt.default__get_rename_intermediate_sql":{"name":"default__get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.default__get_rename_intermediate_sql","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.16706,"supported_languages":null},"macro.dbt.drop_materialized_view":{"name":"drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.drop_materialized_view","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.167329,"supported_languages":null},"macro.dbt.default__drop_materialized_view":{"name":"default__drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.default__drop_materialized_view","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.167434,"supported_languages":null},"macro.dbt.get_replace_materialized_view_sql":{"name":"get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.get_replace_materialized_view_sql","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1676888,"supported_languages":null},"macro.dbt.default__get_replace_materialized_view_sql":{"name":"default__get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.default__get_replace_materialized_view_sql","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1678321,"supported_languages":null},"macro.dbt.refresh_materialized_view":{"name":"refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.refresh_materialized_view","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__refresh_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.168124,"supported_languages":null},"macro.dbt.default__refresh_materialized_view":{"name":"default__refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.default__refresh_materialized_view","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.168313,"supported_languages":null},"macro.dbt.get_rename_materialized_view_sql":{"name":"get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.get_rename_materialized_view_sql","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1685681,"supported_languages":null},"macro.dbt.default__get_rename_materialized_view_sql":{"name":"default__get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.default__get_rename_materialized_view_sql","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.168708,"supported_languages":null},"macro.dbt.get_alter_materialized_view_as_sql":{"name":"get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_alter_materialized_view_as_sql","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.169277,"supported_languages":null},"macro.dbt.default__get_alter_materialized_view_as_sql":{"name":"default__get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1694589,"supported_languages":null},"macro.dbt.get_materialized_view_configuration_changes":{"name":"get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_materialized_view_configuration_changes","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_materialized_view_configuration_changes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.169734,"supported_languages":null},"macro.dbt.default__get_materialized_view_configuration_changes":{"name":"default__get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.169877,"supported_languages":null},"macro.dbt.get_create_materialized_view_as_sql":{"name":"get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.get_create_materialized_view_as_sql","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1701381,"supported_languages":null},"macro.dbt.default__get_create_materialized_view_as_sql":{"name":"default__get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.170273,"supported_languages":null},"macro.dbt.get_table_columns_and_constraints":{"name":"get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_table_columns_and_constraints","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.171184,"supported_languages":null},"macro.dbt.default__get_table_columns_and_constraints":{"name":"default__get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_table_columns_and_constraints","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.171299,"supported_languages":null},"macro.dbt.table_columns_and_constraints":{"name":"table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.table_columns_and_constraints","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.171805,"supported_languages":null},"macro.dbt.get_assert_columns_equivalent":{"name":"get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_assert_columns_equivalent","macro_sql":"\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1719658,"supported_languages":null},"macro.dbt.default__get_assert_columns_equivalent":{"name":"default__get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_assert_columns_equivalent","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.172093,"supported_languages":null},"macro.dbt.assert_columns_equivalent":{"name":"assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.assert_columns_equivalent","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_column_schema_from_query","macro.dbt.get_empty_schema_sql","macro.dbt.format_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.173362,"supported_languages":null},"macro.dbt.format_columns":{"name":"format_columns","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.format_columns","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__format_column"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1737258,"supported_languages":null},"macro.dbt.default__format_column":{"name":"default__format_column","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__format_column","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.174058,"supported_languages":null},"macro.dbt.drop_table":{"name":"drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.drop_table","macro_sql":"{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.174309,"supported_languages":null},"macro.dbt.default__drop_table":{"name":"default__drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.default__drop_table","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1744099,"supported_languages":null},"macro.dbt.get_replace_table_sql":{"name":"get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.get_replace_table_sql","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1746612,"supported_languages":null},"macro.dbt.default__get_replace_table_sql":{"name":"default__get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.default__get_replace_table_sql","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1748009,"supported_languages":null},"macro.dbt.get_rename_table_sql":{"name":"get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.get_rename_table_sql","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1750531,"supported_languages":null},"macro.dbt.default__get_rename_table_sql":{"name":"default__get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.default__get_rename_table_sql","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.175193,"supported_languages":null},"macro.dbt.get_create_table_as_sql":{"name":"get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_create_table_as_sql","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_table_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1759639,"supported_languages":null},"macro.dbt.default__get_create_table_as_sql":{"name":"default__get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_create_table_as_sql","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.176141,"supported_languages":null},"macro.dbt.create_table_as":{"name":"create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.create_table_as","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1765492,"supported_languages":null},"macro.dbt.default__create_table_as":{"name":"default__create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__create_table_as","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt.get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.177214,"supported_languages":null},"macro.dbt.default__get_column_names":{"name":"default__get_column_names","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_column_names","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.17769,"supported_languages":null},"macro.dbt.get_select_subquery":{"name":"get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_select_subquery","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.17787,"supported_languages":null},"macro.dbt.default__get_select_subquery":{"name":"default__get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_select_subquery","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.get_column_names","macro.dbt.default__get_column_names"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.17804,"supported_languages":null},"macro.dbt.drop_view":{"name":"drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.drop_view","macro_sql":"{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.17829,"supported_languages":null},"macro.dbt.default__drop_view":{"name":"default__drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.default__drop_view","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.178394,"supported_languages":null},"macro.dbt.get_replace_view_sql":{"name":"get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.get_replace_view_sql","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.179178,"supported_languages":null},"macro.dbt.default__get_replace_view_sql":{"name":"default__get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__get_replace_view_sql","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.17933,"supported_languages":null},"macro.dbt.create_or_replace_view":{"name":"create_or_replace_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.create_or_replace_view","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.handle_existing_table","macro.dbt.should_full_refresh","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.18047,"supported_languages":null},"macro.dbt.handle_existing_table":{"name":"handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.handle_existing_table","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__handle_existing_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.180662,"supported_languages":null},"macro.dbt.default__handle_existing_table":{"name":"default__handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__handle_existing_table","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.180887,"supported_languages":null},"macro.dbt.get_rename_view_sql":{"name":"get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.get_rename_view_sql","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.181141,"supported_languages":null},"macro.dbt.default__get_rename_view_sql":{"name":"default__get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.default__get_rename_view_sql","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.181281,"supported_languages":null},"macro.dbt.get_create_view_as_sql":{"name":"get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.get_create_view_as_sql","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.181675,"supported_languages":null},"macro.dbt.default__get_create_view_as_sql":{"name":"default__get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__get_create_view_as_sql","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.181833,"supported_languages":null},"macro.dbt.create_view_as":{"name":"create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.create_view_as","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.182005,"supported_languages":null},"macro.dbt.default__create_view_as":{"name":"default__create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__create_view_as","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1824121,"supported_languages":null},"macro.dbt.default__test_relationships":{"name":"default__test_relationships","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/relationships.sql","original_file_path":"macros/generic_test_sql/relationships.sql","unique_id":"macro.dbt.default__test_relationships","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.182739,"supported_languages":null},"macro.dbt.default__test_not_null":{"name":"default__test_not_null","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/not_null.sql","original_file_path":"macros/generic_test_sql/not_null.sql","unique_id":"macro.dbt.default__test_not_null","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1830149,"supported_languages":null},"macro.dbt.default__test_unique":{"name":"default__test_unique","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/unique.sql","original_file_path":"macros/generic_test_sql/unique.sql","unique_id":"macro.dbt.default__test_unique","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1832461,"supported_languages":null},"macro.dbt.default__test_accepted_values":{"name":"default__test_accepted_values","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/accepted_values.sql","original_file_path":"macros/generic_test_sql/accepted_values.sql","unique_id":"macro.dbt.default__test_accepted_values","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.183773,"supported_languages":null},"macro.dbt.statement":{"name":"statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.statement","macro_sql":"\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.185131,"supported_languages":null},"macro.dbt.noop_statement":{"name":"noop_statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.noop_statement","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1856792,"supported_languages":null},"macro.dbt.run_query":{"name":"run_query","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.run_query","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.185958,"supported_languages":null},"macro.dbt.convert_datetime":{"name":"convert_datetime","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.convert_datetime","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1875699,"supported_languages":null},"macro.dbt.dates_in_range":{"name":"dates_in_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.dates_in_range","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.convert_datetime"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.188771,"supported_languages":null},"macro.dbt.partition_range":{"name":"partition_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.partition_range","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dates_in_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1894872,"supported_languages":null},"macro.dbt.py_current_timestring":{"name":"py_current_timestring","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.py_current_timestring","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.189713,"supported_languages":null},"macro.dbt.except":{"name":"except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.except","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.189932,"supported_languages":null},"macro.dbt.default__except":{"name":"default__except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.default__except","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.190006,"supported_languages":null},"macro.dbt.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.190677,"supported_languages":null},"macro.dbt.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1912398,"supported_languages":null},"macro.dbt.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.191466,"supported_languages":null},"macro.dbt.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.generate_series","macro.dbt.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.191818,"supported_languages":null},"macro.dbt.replace":{"name":"replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.replace","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__replace"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.192127,"supported_languages":null},"macro.dbt.default__replace":{"name":"default__replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.default__replace","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1922848,"supported_languages":null},"macro.dbt.concat":{"name":"concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.concat","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.192518,"supported_languages":null},"macro.dbt.default__concat":{"name":"default__concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.default__concat","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1926348,"supported_languages":null},"macro.dbt.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1933792,"supported_languages":null},"macro.dbt.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.193774,"supported_languages":null},"macro.dbt.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.193957,"supported_languages":null},"macro.dbt.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1944478,"supported_languages":null},"macro.dbt.length":{"name":"length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.length","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__length"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.194695,"supported_languages":null},"macro.dbt.default__length":{"name":"default__length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.default__length","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.194797,"supported_languages":null},"macro.dbt.dateadd":{"name":"dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.dateadd","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1951108,"supported_languages":null},"macro.dbt.default__dateadd":{"name":"default__dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.default__dateadd","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1952698,"supported_languages":null},"macro.dbt.intersect":{"name":"intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.intersect","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__intersect"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.195481,"supported_languages":null},"macro.dbt.default__intersect":{"name":"default__intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.default__intersect","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1956182,"supported_languages":null},"macro.dbt.escape_single_quotes":{"name":"escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.escape_single_quotes","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__escape_single_quotes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.195864,"supported_languages":null},"macro.dbt.default__escape_single_quotes":{"name":"default__escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.default__escape_single_quotes","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1959949,"supported_languages":null},"macro.dbt.right":{"name":"right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.right","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__right"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.196269,"supported_languages":null},"macro.dbt.default__right":{"name":"default__right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.default__right","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1964002,"supported_languages":null},"macro.dbt.listagg":{"name":"listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.listagg","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__listagg"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.196975,"supported_languages":null},"macro.dbt.default__listagg":{"name":"default__listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.default__listagg","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.197363,"supported_languages":null},"macro.dbt.datediff":{"name":"datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.datediff","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.197678,"supported_languages":null},"macro.dbt.default__datediff":{"name":"default__datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.default__datediff","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.197834,"supported_languages":null},"macro.dbt.safe_cast":{"name":"safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.safe_cast","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__safe_cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1981041,"supported_languages":null},"macro.dbt.default__safe_cast":{"name":"default__safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.default__safe_cast","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.198238,"supported_languages":null},"macro.dbt.hash":{"name":"hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.hash","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__hash"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.19848,"supported_languages":null},"macro.dbt.default__hash":{"name":"default__hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.default__hash","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.198632,"supported_languages":null},"macro.dbt.cast_bool_to_text":{"name":"cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.cast_bool_to_text","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1988611,"supported_languages":null},"macro.dbt.default__cast_bool_to_text":{"name":"default__cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.default__cast_bool_to_text","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.1990132,"supported_languages":null},"macro.dbt.any_value":{"name":"any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.any_value","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__any_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.199245,"supported_languages":null},"macro.dbt.default__any_value":{"name":"default__any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.default__any_value","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.199348,"supported_languages":null},"macro.dbt.position":{"name":"position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.position","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__position"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.199618,"supported_languages":null},"macro.dbt.default__position":{"name":"default__position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.default__position","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.19975,"supported_languages":null},"macro.dbt.string_literal":{"name":"string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.string_literal","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__string_literal"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.199976,"supported_languages":null},"macro.dbt.default__string_literal":{"name":"default__string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.default__string_literal","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2001338,"supported_languages":null},"macro.dbt.type_string":{"name":"type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_string","macro_sql":"\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.200992,"supported_languages":null},"macro.dbt.default__type_string":{"name":"default__type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_string","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.20114,"supported_languages":null},"macro.dbt.type_timestamp":{"name":"type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_timestamp","macro_sql":"\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2013,"supported_languages":null},"macro.dbt.default__type_timestamp":{"name":"default__type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_timestamp","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.201447,"supported_languages":null},"macro.dbt.type_float":{"name":"type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_float","macro_sql":"\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_float"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.201602,"supported_languages":null},"macro.dbt.default__type_float":{"name":"default__type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_float","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.201746,"supported_languages":null},"macro.dbt.type_numeric":{"name":"type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_numeric","macro_sql":"\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.201903,"supported_languages":null},"macro.dbt.default__type_numeric":{"name":"default__type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_numeric","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2020748,"supported_languages":null},"macro.dbt.type_bigint":{"name":"type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_bigint","macro_sql":"\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_bigint"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.202229,"supported_languages":null},"macro.dbt.default__type_bigint":{"name":"default__type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_bigint","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.202376,"supported_languages":null},"macro.dbt.type_int":{"name":"type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_int","macro_sql":"\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_int"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.202531,"supported_languages":null},"macro.dbt.default__type_int":{"name":"default__type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_int","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2026691,"supported_languages":null},"macro.dbt.type_boolean":{"name":"type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_boolean","macro_sql":"\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_boolean"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.20282,"supported_languages":null},"macro.dbt.default__type_boolean":{"name":"default__type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_boolean","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.202956,"supported_languages":null},"macro.dbt.array_concat":{"name":"array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.array_concat","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2032168,"supported_languages":null},"macro.dbt.default__array_concat":{"name":"default__array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.default__array_concat","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.203346,"supported_languages":null},"macro.dbt.bool_or":{"name":"bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.bool_or","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__bool_or"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.203578,"supported_languages":null},"macro.dbt.default__bool_or":{"name":"default__bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.default__bool_or","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.203676,"supported_languages":null},"macro.dbt.last_day":{"name":"last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.last_day","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.203991,"supported_languages":null},"macro.dbt.default_last_day":{"name":"default_last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default_last_day","macro_sql":"\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.204309,"supported_languages":null},"macro.dbt.default__last_day":{"name":"default__last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default__last_day","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.204451,"supported_languages":null},"macro.dbt.split_part":{"name":"split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.split_part","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.204931,"supported_languages":null},"macro.dbt.default__split_part":{"name":"default__split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.default__split_part","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.205086,"supported_languages":null},"macro.dbt._split_part_negative":{"name":"_split_part_negative","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt._split_part_negative","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2052941,"supported_languages":null},"macro.dbt.date_trunc":{"name":"date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.date_trunc","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2055528,"supported_languages":null},"macro.dbt.default__date_trunc":{"name":"default__date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.default__date_trunc","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.205678,"supported_languages":null},"macro.dbt.array_construct":{"name":"array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.array_construct","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_construct"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.206031,"supported_languages":null},"macro.dbt.default__array_construct":{"name":"default__array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.default__array_construct","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.206264,"supported_languages":null},"macro.dbt.array_append":{"name":"array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.array_append","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_append"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.206531,"supported_languages":null},"macro.dbt.default__array_append":{"name":"default__array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.default__array_append","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2066612,"supported_languages":null},"macro.dbt.create_schema":{"name":"create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.create_schema","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.207005,"supported_languages":null},"macro.dbt.default__create_schema":{"name":"default__create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__create_schema","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.20718,"supported_languages":null},"macro.dbt.drop_schema":{"name":"drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.drop_schema","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.207339,"supported_languages":null},"macro.dbt.default__drop_schema":{"name":"default__drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__drop_schema","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.207517,"supported_languages":null},"macro.dbt.current_timestamp":{"name":"current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.207957,"supported_languages":null},"macro.dbt.default__current_timestamp":{"name":"default__current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2080991,"supported_languages":null},"macro.dbt.snapshot_get_time":{"name":"snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.snapshot_get_time","macro_sql":"\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.208234,"supported_languages":null},"macro.dbt.default__snapshot_get_time":{"name":"default__snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__snapshot_get_time","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2083352,"supported_languages":null},"macro.dbt.current_timestamp_backcompat":{"name":"current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_backcompat","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.208491,"supported_languages":null},"macro.dbt.default__current_timestamp_backcompat":{"name":"default__current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_backcompat","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.208565,"supported_languages":null},"macro.dbt.current_timestamp_in_utc_backcompat":{"name":"current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_in_utc_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2088919,"supported_languages":null},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"name":"default__current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp_backcompat","macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.209049,"supported_languages":null},"macro.dbt.get_create_index_sql":{"name":"get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_create_index_sql","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2097988,"supported_languages":null},"macro.dbt.default__get_create_index_sql":{"name":"default__get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_create_index_sql","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.20993,"supported_languages":null},"macro.dbt.create_indexes":{"name":"create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.create_indexes","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.210083,"supported_languages":null},"macro.dbt.default__create_indexes":{"name":"default__create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__create_indexes","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_create_index_sql","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.21046,"supported_languages":null},"macro.dbt.get_drop_index_sql":{"name":"get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_drop_index_sql","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_drop_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.210641,"supported_languages":null},"macro.dbt.default__get_drop_index_sql":{"name":"default__get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_drop_index_sql","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.21077,"supported_languages":null},"macro.dbt.get_show_indexes_sql":{"name":"get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_show_indexes_sql","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_indexes_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.210916,"supported_languages":null},"macro.dbt.default__get_show_indexes_sql":{"name":"default__get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_show_indexes_sql","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2110348,"supported_languages":null},"macro.dbt.make_intermediate_relation":{"name":"make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_intermediate_relation","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_intermediate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.212783,"supported_languages":null},"macro.dbt.default__make_intermediate_relation":{"name":"default__make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_intermediate_relation","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2129412,"supported_languages":null},"macro.dbt.make_temp_relation":{"name":"make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_temp_relation","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2131488,"supported_languages":null},"macro.dbt.default__make_temp_relation":{"name":"default__make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_temp_relation","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2134242,"supported_languages":null},"macro.dbt.make_backup_relation":{"name":"make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_backup_relation","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_backup_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2136588,"supported_languages":null},"macro.dbt.default__make_backup_relation":{"name":"default__make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_backup_relation","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.213971,"supported_languages":null},"macro.dbt.truncate_relation":{"name":"truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.truncate_relation","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__truncate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.214158,"supported_languages":null},"macro.dbt.default__truncate_relation":{"name":"default__truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__truncate_relation","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.214313,"supported_languages":null},"macro.dbt.get_or_create_relation":{"name":"get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.get_or_create_relation","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_or_create_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.214553,"supported_languages":null},"macro.dbt.default__get_or_create_relation":{"name":"default__get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__get_or_create_relation","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.215159,"supported_languages":null},"macro.dbt.load_cached_relation":{"name":"load_cached_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_cached_relation","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.215383,"supported_languages":null},"macro.dbt.load_relation":{"name":"load_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_relation","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.215521,"supported_languages":null},"macro.dbt.collect_freshness":{"name":"collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.collect_freshness","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__collect_freshness"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.21591,"supported_languages":null},"macro.dbt.default__collect_freshness":{"name":"default__collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.default__collect_freshness","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2163022,"supported_languages":null},"macro.dbt.validate_sql":{"name":"validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.validate_sql","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__validate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.216568,"supported_languages":null},"macro.dbt.default__validate_sql":{"name":"default__validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.default__validate_sql","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.216782,"supported_languages":null},"macro.dbt.copy_grants":{"name":"copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.copy_grants","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2183092,"supported_languages":null},"macro.dbt.default__copy_grants":{"name":"default__copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__copy_grants","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2184231,"supported_languages":null},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"name":"support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.218581,"supported_languages":null},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"name":"default__support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement","macro_sql":"\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2186902,"supported_languages":null},"macro.dbt.should_revoke":{"name":"should_revoke","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.should_revoke","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2190158,"supported_languages":null},"macro.dbt.get_show_grant_sql":{"name":"get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_show_grant_sql","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.219198,"supported_languages":null},"macro.dbt.default__get_show_grant_sql":{"name":"default__get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_show_grant_sql","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.219297,"supported_languages":null},"macro.dbt.get_grant_sql":{"name":"get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_grant_sql","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2195158,"supported_languages":null},"macro.dbt.default__get_grant_sql":{"name":"default__get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_grant_sql","macro_sql":"\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.219701,"supported_languages":null},"macro.dbt.get_revoke_sql":{"name":"get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_revoke_sql","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_revoke_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.219917,"supported_languages":null},"macro.dbt.default__get_revoke_sql":{"name":"default__get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_revoke_sql","macro_sql":"\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.220099,"supported_languages":null},"macro.dbt.get_dcl_statement_list":{"name":"get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_dcl_statement_list","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_dcl_statement_list"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.220317,"supported_languages":null},"macro.dbt.default__get_dcl_statement_list":{"name":"default__get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_dcl_statement_list","macro_sql":"\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2210329,"supported_languages":null},"macro.dbt.call_dcl_statements":{"name":"call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.call_dcl_statements","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.221216,"supported_languages":null},"macro.dbt.default__call_dcl_statements":{"name":"default__call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__call_dcl_statements","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.221457,"supported_languages":null},"macro.dbt.apply_grants":{"name":"apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.apply_grants","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2216792,"supported_languages":null},"macro.dbt.default__apply_grants":{"name":"default__apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__apply_grants","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.get_show_grant_sql","macro.dbt.get_dcl_statement_list","macro.dbt.call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2227662,"supported_languages":null},"macro.dbt.get_show_sql":{"name":"get_show_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_show_sql","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.223267,"supported_languages":null},"macro.dbt.get_limit_subquery_sql":{"name":"get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_limit_subquery_sql","macro_sql":"{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.223454,"supported_languages":null},"macro.dbt.default__get_limit_subquery_sql":{"name":"default__get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.default__get_limit_subquery_sql","macro_sql":"{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.223583,"supported_languages":null},"macro.dbt.alter_column_comment":{"name":"alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_column_comment","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.22419,"supported_languages":null},"macro.dbt.default__alter_column_comment":{"name":"default__alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_column_comment","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2243562,"supported_languages":null},"macro.dbt.alter_relation_comment":{"name":"alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_relation_comment","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_relation_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.224549,"supported_languages":null},"macro.dbt.default__alter_relation_comment":{"name":"default__alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_relation_comment","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.224712,"supported_languages":null},"macro.dbt.persist_docs":{"name":"persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.persist_docs","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.224971,"supported_languages":null},"macro.dbt.default__persist_docs":{"name":"default__persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__persist_docs","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.alter_relation_comment","macro.dbt.alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.225436,"supported_languages":null},"macro.dbt.get_catalog_relations":{"name":"get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog_relations","macro_sql":"{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_catalog_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2279198,"supported_languages":null},"macro.dbt.default__get_catalog_relations":{"name":"default__get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog_relations","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2281659,"supported_languages":null},"macro.dbt.get_catalog":{"name":"get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_catalog"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.228359,"supported_languages":null},"macro.dbt.default__get_catalog":{"name":"default__get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.228599,"supported_languages":null},"macro.dbt.information_schema_name":{"name":"information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.information_schema_name","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__information_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2287831,"supported_languages":null},"macro.dbt.default__information_schema_name":{"name":"default__information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__information_schema_name","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2289321,"supported_languages":null},"macro.dbt.list_schemas":{"name":"list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_schemas","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.22911,"supported_languages":null},"macro.dbt.default__list_schemas":{"name":"default__list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_schemas","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.information_schema_name","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.229409,"supported_languages":null},"macro.dbt.check_schema_exists":{"name":"check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.check_schema_exists","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__check_schema_exists"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2296069,"supported_languages":null},"macro.dbt.default__check_schema_exists":{"name":"default__check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__check_schema_exists","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.229894,"supported_languages":null},"macro.dbt.list_relations_without_caching":{"name":"list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_relations_without_caching","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_relations_without_caching"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2300742,"supported_languages":null},"macro.dbt.default__list_relations_without_caching":{"name":"default__list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_relations_without_caching","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.23023,"supported_languages":null},"macro.dbt.get_relations":{"name":"get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relations","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.230391,"supported_languages":null},"macro.dbt.default__get_relations":{"name":"default__get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relations","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2305448,"supported_languages":null},"macro.dbt.get_relation_last_modified":{"name":"get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relation_last_modified","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relation_last_modified"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.230745,"supported_languages":null},"macro.dbt.default__get_relation_last_modified":{"name":"default__get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relation_last_modified","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.230913,"supported_languages":null},"macro.dbt.get_columns_in_relation":{"name":"get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_relation","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.232893,"supported_languages":null},"macro.dbt.default__get_columns_in_relation":{"name":"default__get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_relation","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2330492,"supported_languages":null},"macro.dbt.sql_convert_columns_in_relation":{"name":"sql_convert_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.sql_convert_columns_in_relation","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.233346,"supported_languages":null},"macro.dbt.get_empty_subquery_sql":{"name":"get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_subquery_sql","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.233557,"supported_languages":null},"macro.dbt.default__get_empty_subquery_sql":{"name":"default__get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_subquery_sql","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.233752,"supported_languages":null},"macro.dbt.get_empty_schema_sql":{"name":"get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_schema_sql","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_schema_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2339258,"supported_languages":null},"macro.dbt.default__get_empty_schema_sql":{"name":"default__get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_schema_sql","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2350779,"supported_languages":null},"macro.dbt.get_column_schema_from_query":{"name":"get_column_schema_from_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_column_schema_from_query","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2354271,"supported_languages":null},"macro.dbt.get_columns_in_query":{"name":"get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_query","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.235615,"supported_languages":null},"macro.dbt.default__get_columns_in_query":{"name":"default__get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_query","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.23596,"supported_languages":null},"macro.dbt.alter_column_type":{"name":"alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_column_type","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.236199,"supported_languages":null},"macro.dbt.default__alter_column_type":{"name":"default__alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_column_type","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2368152,"supported_languages":null},"macro.dbt.alter_relation_add_remove_columns":{"name":"alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_relation_add_remove_columns","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.237082,"supported_languages":null},"macro.dbt.default__alter_relation_add_remove_columns":{"name":"default__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_relation_add_remove_columns","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.237866,"supported_languages":null},"macro.dbt.resolve_model_name":{"name":"resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.resolve_model_name","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.23932,"supported_languages":null},"macro.dbt.default__resolve_model_name":{"name":"default__resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.default__resolve_model_name","macro_sql":"\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.23947,"supported_languages":null},"macro.dbt.build_ref_function":{"name":"build_ref_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_ref_function","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.240253,"supported_languages":null},"macro.dbt.build_source_function":{"name":"build_source_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_source_function","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.240642,"supported_languages":null},"macro.dbt.build_config_dict":{"name":"build_config_dict","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_config_dict","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.241195,"supported_languages":null},"macro.dbt.py_script_postfix":{"name":"py_script_postfix","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_postfix","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.build_ref_function","macro.dbt.build_source_function","macro.dbt.build_config_dict","macro.dbt.resolve_model_name","macro.dbt.is_incremental","macro.dbt.py_script_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.241642,"supported_languages":null},"macro.dbt.py_script_comment":{"name":"py_script_comment","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_comment","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2417128,"supported_languages":null},"macro.dbt.test_unique":{"name":"test_unique","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_unique","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_unique"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2421749,"supported_languages":null},"macro.dbt.test_not_null":{"name":"test_not_null","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_not_null","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_not_null"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.242392,"supported_languages":null},"macro.dbt.test_accepted_values":{"name":"test_accepted_values","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_accepted_values","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.242666,"supported_languages":null},"macro.dbt.test_relationships":{"name":"test_relationships","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_relationships","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_relationships"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.242928,"supported_languages":null},"macro.dbt_utils.get_url_host":{"name":"get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.get_url_host","macro_sql":"{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_host"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.243257,"supported_languages":null},"macro.dbt_utils.default__get_url_host":{"name":"default__get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.default__get_url_host","macro_sql":"{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part","macro.dbt.replace","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.243775,"supported_languages":null},"macro.dbt_utils.get_url_path":{"name":"get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.get_url_path","macro_sql":"{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_path"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.244215,"supported_languages":null},"macro.dbt_utils.default__get_url_path":{"name":"default__get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.default__get_url_path","macro_sql":"{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.position","macro.dbt.split_part","macro.dbt.right","macro.dbt.length","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.24484,"supported_languages":null},"macro.dbt_utils.get_url_parameter":{"name":"get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.get_url_parameter","macro_sql":"{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_parameter"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.245135,"supported_languages":null},"macro.dbt_utils.default__get_url_parameter":{"name":"default__get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.default__get_url_parameter","macro_sql":"{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.245447,"supported_languages":null},"macro.dbt_utils.test_fewer_rows_than":{"name":"test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.test_fewer_rows_than","macro_sql":"{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_fewer_rows_than"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2464268,"supported_languages":null},"macro.dbt_utils.default__test_fewer_rows_than":{"name":"default__test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.default__test_fewer_rows_than","macro_sql":"{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.247391,"supported_languages":null},"macro.dbt_utils.test_equal_rowcount":{"name":"test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.test_equal_rowcount","macro_sql":"{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equal_rowcount"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.248211,"supported_languages":null},"macro.dbt_utils.default__test_equal_rowcount":{"name":"default__test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.default__test_equal_rowcount","macro_sql":"{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.249246,"supported_languages":null},"macro.dbt_utils.test_relationships_where":{"name":"test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.test_relationships_where","macro_sql":"{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_relationships_where"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.249861,"supported_languages":null},"macro.dbt_utils.default__test_relationships_where":{"name":"default__test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.default__test_relationships_where","macro_sql":"{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.250185,"supported_languages":null},"macro.dbt_utils.test_recency":{"name":"test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.test_recency","macro_sql":"{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_recency"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.250855,"supported_languages":null},"macro.dbt_utils.default__test_recency":{"name":"default__test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.default__test_recency","macro_sql":"{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.current_timestamp","macro.dbt.type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2516532,"supported_languages":null},"macro.dbt_utils.test_not_constant":{"name":"test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.test_not_constant","macro_sql":"{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_constant"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.252071,"supported_languages":null},"macro.dbt_utils.default__test_not_constant":{"name":"default__test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.default__test_not_constant","macro_sql":"{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.252505,"supported_languages":null},"macro.dbt_utils.test_accepted_range":{"name":"test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.test_accepted_range","macro_sql":"{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_accepted_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2530649,"supported_languages":null},"macro.dbt_utils.default__test_accepted_range":{"name":"default__test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.default__test_accepted_range","macro_sql":"{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.253516,"supported_languages":null},"macro.dbt_utils.test_not_accepted_values":{"name":"test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.test_not_accepted_values","macro_sql":"{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.254019,"supported_languages":null},"macro.dbt_utils.default__test_not_accepted_values":{"name":"default__test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.default__test_not_accepted_values","macro_sql":"{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2544498,"supported_languages":null},"macro.dbt_utils.test_at_least_one":{"name":"test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.test_at_least_one","macro_sql":"{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_at_least_one"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.255056,"supported_languages":null},"macro.dbt_utils.default__test_at_least_one":{"name":"default__test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.default__test_at_least_one","macro_sql":"{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.255815,"supported_languages":null},"macro.dbt_utils.test_unique_combination_of_columns":{"name":"test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.test_unique_combination_of_columns","macro_sql":"{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_unique_combination_of_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2563882,"supported_languages":null},"macro.dbt_utils.default__test_unique_combination_of_columns":{"name":"default__test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.default__test_unique_combination_of_columns","macro_sql":"{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.256994,"supported_languages":null},"macro.dbt_utils.test_cardinality_equality":{"name":"test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.test_cardinality_equality","macro_sql":"{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_cardinality_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.25751,"supported_languages":null},"macro.dbt_utils.default__test_cardinality_equality":{"name":"default__test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.default__test_cardinality_equality","macro_sql":"{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.257835,"supported_languages":null},"macro.dbt_utils.test_expression_is_true":{"name":"test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.test_expression_is_true","macro_sql":"{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_expression_is_true"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.25821,"supported_languages":null},"macro.dbt_utils.default__test_expression_is_true":{"name":"default__test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.default__test_expression_is_true","macro_sql":"{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.258553,"supported_languages":null},"macro.dbt_utils.test_not_null_proportion":{"name":"test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.test_not_null_proportion","macro_sql":"{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_null_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2591429,"supported_languages":null},"macro.dbt_utils.default__test_not_null_proportion":{"name":"default__test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.default__test_not_null_proportion","macro_sql":"{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2599208,"supported_languages":null},"macro.dbt_utils.test_sequential_values":{"name":"test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.test_sequential_values","macro_sql":"{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_sequential_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2607381,"supported_languages":null},"macro.dbt_utils.default__test_sequential_values":{"name":"default__test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.default__test_sequential_values","macro_sql":"{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.slugify","macro.dbt.type_timestamp","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.261607,"supported_languages":null},"macro.dbt_utils.test_equality":{"name":"test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.test_equality","macro_sql":"{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.262296,"supported_languages":null},"macro.dbt_utils.default__test_equality":{"name":"default__test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.default__test_equality","macro_sql":"{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2631528,"supported_languages":null},"macro.dbt_utils.test_not_empty_string":{"name":"test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.test_not_empty_string","macro_sql":"{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_empty_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2636201,"supported_languages":null},"macro.dbt_utils.default__test_not_empty_string":{"name":"default__test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.default__test_not_empty_string","macro_sql":"{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.26392,"supported_languages":null},"macro.dbt_utils.test_mutually_exclusive_ranges":{"name":"test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.test_mutually_exclusive_ranges","macro_sql":"{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_mutually_exclusive_ranges"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2669928,"supported_languages":null},"macro.dbt_utils.default__test_mutually_exclusive_ranges":{"name":"default__test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.default__test_mutually_exclusive_ranges","macro_sql":"{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.268511,"supported_languages":null},"macro.dbt_utils.pretty_log_format":{"name":"pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.pretty_log_format","macro_sql":"{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2687721,"supported_languages":null},"macro.dbt_utils.default__pretty_log_format":{"name":"default__pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.default__pretty_log_format","macro_sql":"{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.268938,"supported_languages":null},"macro.dbt_utils._is_relation":{"name":"_is_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_relation.sql","original_file_path":"macros/jinja_helpers/_is_relation.sql","unique_id":"macro.dbt_utils._is_relation","macro_sql":"{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.269359,"supported_languages":null},"macro.dbt_utils.pretty_time":{"name":"pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.pretty_time","macro_sql":"{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.269622,"supported_languages":null},"macro.dbt_utils.default__pretty_time":{"name":"default__pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.default__pretty_time","macro_sql":"{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.269814,"supported_languages":null},"macro.dbt_utils.log_info":{"name":"log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.log_info","macro_sql":"{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__log_info"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2700548,"supported_languages":null},"macro.dbt_utils.default__log_info":{"name":"default__log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.default__log_info","macro_sql":"{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.27022,"supported_languages":null},"macro.dbt_utils.slugify":{"name":"slugify","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/slugify.sql","original_file_path":"macros/jinja_helpers/slugify.sql","unique_id":"macro.dbt_utils.slugify","macro_sql":"{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.270798,"supported_languages":null},"macro.dbt_utils._is_ephemeral":{"name":"_is_ephemeral","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_ephemeral.sql","original_file_path":"macros/jinja_helpers/_is_ephemeral.sql","unique_id":"macro.dbt_utils._is_ephemeral","macro_sql":"{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.271571,"supported_languages":null},"macro.dbt_utils.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.272206,"supported_languages":null},"macro.dbt_utils.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2727659,"supported_languages":null},"macro.dbt_utils.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.272989,"supported_languages":null},"macro.dbt_utils.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.generate_series","macro.dbt_utils.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2733371,"supported_languages":null},"macro.dbt_utils.safe_subtract":{"name":"safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.safe_subtract","macro_sql":"{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_subtract"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.273691,"supported_languages":null},"macro.dbt_utils.default__safe_subtract":{"name":"default__safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.default__safe_subtract","macro_sql":"\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2742028,"supported_languages":null},"macro.dbt_utils.nullcheck_table":{"name":"nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.nullcheck_table","macro_sql":"{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.274498,"supported_languages":null},"macro.dbt_utils.default__nullcheck_table":{"name":"default__nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.default__nullcheck_table","macro_sql":"{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2748291,"supported_languages":null},"macro.dbt_utils.get_relations_by_pattern":{"name":"get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.get_relations_by_pattern","macro_sql":"{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_pattern"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.275448,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_pattern":{"name":"default__get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.default__get_relations_by_pattern","macro_sql":"{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.276313,"supported_languages":null},"macro.dbt_utils.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.277065,"supported_languages":null},"macro.dbt_utils.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.277466,"supported_languages":null},"macro.dbt_utils.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.277649,"supported_languages":null},"macro.dbt_utils.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.278141,"supported_languages":null},"macro.dbt_utils.get_relations_by_prefix":{"name":"get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.get_relations_by_prefix","macro_sql":"{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_prefix"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.278757,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_prefix":{"name":"default__get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.default__get_relations_by_prefix","macro_sql":"{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.279576,"supported_languages":null},"macro.dbt_utils.get_tables_by_prefix_sql":{"name":"get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_prefix_sql","macro_sql":"{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.279958,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_prefix_sql":{"name":"default__get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_prefix_sql","macro_sql":"{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2802272,"supported_languages":null},"macro.dbt_utils.star":{"name":"star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__star"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.281387,"supported_languages":null},"macro.dbt_utils.default__star":{"name":"default__star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.default__star","macro_sql":"{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.282728,"supported_languages":null},"macro.dbt_utils.unpivot":{"name":"unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.unpivot","macro_sql":"{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__unpivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.283925,"supported_languages":null},"macro.dbt_utils.default__unpivot":{"name":"default__unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.default__unpivot","macro_sql":"{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.type_string","macro.dbt.cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.285503,"supported_languages":null},"macro.dbt_utils.safe_divide":{"name":"safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.safe_divide","macro_sql":"{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_divide"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.28578,"supported_languages":null},"macro.dbt_utils.default__safe_divide":{"name":"default__safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.default__safe_divide","macro_sql":"{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.285907,"supported_languages":null},"macro.dbt_utils.union_relations":{"name":"union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.union_relations","macro_sql":"{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__union_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.28883,"supported_languages":null},"macro.dbt_utils.default__union_relations":{"name":"default__union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.default__union_relations","macro_sql":"\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.string_literal","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2921631,"supported_languages":null},"macro.dbt_utils.group_by":{"name":"group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__group_by"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.292469,"supported_languages":null},"macro.dbt_utils.default__group_by":{"name":"default__group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.default__group_by","macro_sql":"\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2927182,"supported_languages":null},"macro.dbt_utils.deduplicate":{"name":"deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.deduplicate","macro_sql":"{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.293428,"supported_languages":null},"macro.dbt_utils.default__deduplicate":{"name":"default__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.default__deduplicate","macro_sql":"\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.29364,"supported_languages":null},"macro.dbt_utils.redshift__deduplicate":{"name":"redshift__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.redshift__deduplicate","macro_sql":"{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.293835,"supported_languages":null},"macro.dbt_utils.postgres__deduplicate":{"name":"postgres__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.postgres__deduplicate","macro_sql":"\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2940211,"supported_languages":null},"macro.dbt_utils.snowflake__deduplicate":{"name":"snowflake__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.snowflake__deduplicate","macro_sql":"\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.294178,"supported_languages":null},"macro.dbt_utils.bigquery__deduplicate":{"name":"bigquery__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.bigquery__deduplicate","macro_sql":"\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.294351,"supported_languages":null},"macro.dbt_utils.surrogate_key":{"name":"surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.294715,"supported_languages":null},"macro.dbt_utils.default__surrogate_key":{"name":"default__surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.default__surrogate_key","macro_sql":"\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2949471,"supported_languages":null},"macro.dbt_utils.safe_add":{"name":"safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.safe_add","macro_sql":"{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_add"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.295302,"supported_languages":null},"macro.dbt_utils.default__safe_add":{"name":"default__safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.default__safe_add","macro_sql":"\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2958279,"supported_languages":null},"macro.dbt_utils.nullcheck":{"name":"nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.nullcheck","macro_sql":"{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.296146,"supported_languages":null},"macro.dbt_utils.default__nullcheck":{"name":"default__nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.default__nullcheck","macro_sql":"{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.296464,"supported_languages":null},"macro.dbt_utils.get_tables_by_pattern_sql":{"name":"get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_pattern_sql","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.29801,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_pattern_sql":{"name":"default__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_pattern_sql","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2983649,"supported_languages":null},"macro.dbt_utils.bigquery__get_tables_by_pattern_sql":{"name":"bigquery__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.bigquery__get_tables_by_pattern_sql","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._bigquery__get_matching_schemata","macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.299114,"supported_languages":null},"macro.dbt_utils._bigquery__get_matching_schemata":{"name":"_bigquery__get_matching_schemata","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils._bigquery__get_matching_schemata","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.2995992,"supported_languages":null},"macro.dbt_utils.get_column_values":{"name":"get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.get_column_values","macro_sql":"{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_column_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3006148,"supported_languages":null},"macro.dbt_utils.default__get_column_values":{"name":"default__get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.default__get_column_values","macro_sql":"{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_ephemeral","macro.dbt.load_relation","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.302063,"supported_languages":null},"macro.dbt_utils.pivot":{"name":"pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.pivot","macro_sql":"{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.303046,"supported_languages":null},"macro.dbt_utils.default__pivot":{"name":"default__pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.default__pivot","macro_sql":"{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.escape_single_quotes","macro.dbt_utils.slugify"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.303851,"supported_languages":null},"macro.dbt_utils.get_filtered_columns_in_relation":{"name":"get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.get_filtered_columns_in_relation","macro_sql":"{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.304283,"supported_languages":null},"macro.dbt_utils.default__get_filtered_columns_in_relation":{"name":"default__get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.default__get_filtered_columns_in_relation","macro_sql":"{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.304978,"supported_languages":null},"macro.dbt_utils.width_bucket":{"name":"width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.width_bucket","macro_sql":"{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__width_bucket"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3056839,"supported_languages":null},"macro.dbt_utils.default__width_bucket":{"name":"default__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.default__width_bucket","macro_sql":"{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.safe_cast","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.306123,"supported_languages":null},"macro.dbt_utils.snowflake__width_bucket":{"name":"snowflake__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.snowflake__width_bucket","macro_sql":"{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3063061,"supported_languages":null},"macro.dbt_utils.get_query_results_as_dict":{"name":"get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.get_query_results_as_dict","macro_sql":"{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_query_results_as_dict"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.306667,"supported_languages":null},"macro.dbt_utils.default__get_query_results_as_dict":{"name":"default__get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.default__get_query_results_as_dict","macro_sql":"{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.307235,"supported_languages":null},"macro.dbt_utils.generate_surrogate_key":{"name":"generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.generate_surrogate_key","macro_sql":"{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3076632,"supported_languages":null},"macro.dbt_utils.default__generate_surrogate_key":{"name":"default__generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.default__generate_surrogate_key","macro_sql":"\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.type_string","macro.dbt.hash","macro.dbt.concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3082628,"supported_languages":null},"macro.dbt_utils.get_table_types_sql":{"name":"get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.get_table_types_sql","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_utils.default__get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3087502,"supported_languages":null},"macro.dbt_utils.default__get_table_types_sql":{"name":"default__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.default__get_table_types_sql","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.308888,"supported_languages":null},"macro.dbt_utils.postgres__get_table_types_sql":{"name":"postgres__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.postgres__get_table_types_sql","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.3090198,"supported_languages":null},"macro.dbt_utils.databricks__get_table_types_sql":{"name":"databricks__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.databricks__get_table_types_sql","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.309152,"supported_languages":null},"macro.dbt_utils.get_single_value":{"name":"get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.get_single_value","macro_sql":"{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_single_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.30962,"supported_languages":null},"macro.dbt_utils.default__get_single_value":{"name":"default__get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.default__get_single_value","macro_sql":"{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.310511,"supported_languages":null},"macro.dbt_utils.degrees_to_radians":{"name":"degrees_to_radians","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.degrees_to_radians","macro_sql":"{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.311469,"supported_languages":null},"macro.dbt_utils.haversine_distance":{"name":"haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.haversine_distance","macro_sql":"{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__haversine_distance"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.311733,"supported_languages":null},"macro.dbt_utils.default__haversine_distance":{"name":"default__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.default__haversine_distance","macro_sql":"{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.312255,"supported_languages":null},"macro.dbt_utils.bigquery__haversine_distance":{"name":"bigquery__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.bigquery__haversine_distance","macro_sql":"{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.degrees_to_radians"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1700535972.313039,"supported_languages":null}},"docs":{"doc.jaffle_shop.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"jaffle_shop","path":"overview.md","original_file_path":"models/overview.md","unique_id":"doc.jaffle_shop.__overview__","block_contents":"## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."},"doc.jaffle_shop.orders_status":{"name":"orders_status","resource_type":"doc","package_name":"jaffle_shop","path":"marts/docs.md","original_file_path":"models/marts/docs.md","unique_id":"doc.jaffle_shop.orders_status","block_contents":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"},"doc.dbt.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"dbt","path":"overview.md","original_file_path":"docs/overview.md","unique_id":"doc.dbt.__overview__","block_contents":"### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}},"exposures":{},"metrics":{"metric.jaffle_shop.average_order_amount":{"name":"average_order_amount","resource_type":"metric","package_name":"jaffle_shop","path":"marts/orders.yml","original_file_path":"models/marts/orders.yml","unique_id":"metric.jaffle_shop.average_order_amount","fqn":["jaffle_shop","marts","average_order_amount"],"description":"The average size of a jaffle order","label":"Average Order Amount","type":"simple","type_params":{"measure":{"name":"average_order_amount","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null},"input_measures":[{"name":"average_order_amount","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null}],"numerator":null,"denominator":null,"expr":null,"window":null,"grain_to_date":null,"metrics":[]},"filter":null,"metadata":null,"meta":{},"tags":[],"config":{"enabled":true,"group":null},"unrendered_config":{},"sources":[],"depends_on":{"macros":[],"nodes":["semantic_model.jaffle_shop.orders"]},"refs":[],"metrics":[],"created_at":1700536057.600697,"group":null},"metric.jaffle_shop.profit":{"name":"profit","resource_type":"metric","package_name":"jaffle_shop","path":"marts/orders.yml","original_file_path":"models/marts/orders.yml","unique_id":"metric.jaffle_shop.profit","fqn":["jaffle_shop","marts","profit"],"description":"The total money we get to take home from our jaffle business","label":"Profit","type":"derived","type_params":{"measure":null,"input_measures":[{"name":"revenue","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null},{"name":"expense","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null}],"numerator":null,"denominator":null,"expr":"revenue - expenses","window":null,"grain_to_date":null,"metrics":[{"name":"revenue","filter":{"where_filters":[{"where_sql_template":"{{ Dimension('order_id__status') }} = 'completed'\n"}]},"alias":null,"offset_window":null,"offset_to_grain":null},{"name":"expenses","filter":{"where_filters":[{"where_sql_template":"{{ Dimension('order_id__status') }} = 'completed'"}]},"alias":null,"offset_window":null,"offset_to_grain":null}]},"filter":null,"metadata":null,"meta":{},"tags":[],"config":{"enabled":true,"group":null},"unrendered_config":{},"sources":[],"depends_on":{"macros":[],"nodes":["metric.jaffle_shop.revenue","metric.jaffle_shop.expenses"]},"refs":[],"metrics":[],"created_at":1700536057.601884,"group":null},"metric.jaffle_shop.expenses":{"name":"expenses","resource_type":"metric","package_name":"jaffle_shop","path":"marts/orders.yml","original_file_path":"models/marts/orders.yml","unique_id":"metric.jaffle_shop.expenses","fqn":["jaffle_shop","marts","expenses"],"description":"The total expenses of our jaffle business","label":"Expenses","type":"simple","type_params":{"measure":{"name":"expense","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null},"input_measures":[{"name":"expense","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null}],"numerator":null,"denominator":null,"expr":null,"window":null,"grain_to_date":null,"metrics":[]},"filter":{"where_filters":[{"where_sql_template":"{{ Dimension('order_id__status') }} = 'completed'\n"}]},"metadata":null,"meta":{},"tags":[],"config":{"enabled":true,"group":null},"unrendered_config":{},"sources":[],"depends_on":{"macros":[],"nodes":["semantic_model.jaffle_shop.orders"]},"refs":[],"metrics":[],"created_at":1700536057.602315,"group":null},"metric.jaffle_shop.revenue":{"name":"revenue","resource_type":"metric","package_name":"jaffle_shop","path":"marts/orders.yml","original_file_path":"models/marts/orders.yml","unique_id":"metric.jaffle_shop.revenue","fqn":["jaffle_shop","marts","revenue"],"description":"The total revenue of our jaffle business","label":"Revenue","type":"simple","type_params":{"measure":{"name":"revenue","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null},"input_measures":[{"name":"revenue","filter":null,"alias":null,"join_to_timespine":false,"fill_nulls_with":null}],"numerator":null,"denominator":null,"expr":null,"window":null,"grain_to_date":null,"metrics":[]},"filter":{"where_filters":[{"where_sql_template":"{{ Dimension('order_id__status') }} = 'completed'\n"}]},"metadata":null,"meta":{},"tags":[],"config":{"enabled":true,"group":null},"unrendered_config":{},"sources":[],"depends_on":{"macros":[],"nodes":["semantic_model.jaffle_shop.orders"]},"refs":[],"metrics":[],"created_at":1700536057.6026082,"group":null}},"groups":{},"selectors":{},"disabled":{},"parent_map":{"model.jaffle_shop.int_order_payments_pivoted":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.int_customer_order_history_joined":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.metricflow_time_spine":[],"model.jaffle_shop.stg_customers":["seed.jaffle_shop.raw_customers"],"model.jaffle_shop.stg_payments":["seed.jaffle_shop.raw_payments"],"model.jaffle_shop.stg_orders":["seed.jaffle_shop.raw_orders"],"seed.jaffle_shop.raw_customers":[],"seed.jaffle_shop.raw_orders":[],"seed.jaffle_shop.raw_payments":[],"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9":["model.jaffle_shop.int_customer_order_history_joined"],"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92":["model.jaffle_shop.int_customer_order_history_joined"],"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d":["model.jaffle_shop.int_customer_order_history_joined","model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0":["model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":["model.jaffle_shop.stg_payments"],"model.jaffle_shop.orders":["model.jaffle_shop.int_customer_order_history_joined","model.jaffle_shop.int_order_payments_pivoted"],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":["model.jaffle_shop.orders"],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_amount.106140f9fd":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":["model.jaffle_shop.orders"],"metric.jaffle_shop.average_order_amount":["semantic_model.jaffle_shop.orders"],"metric.jaffle_shop.profit":["metric.jaffle_shop.expenses","metric.jaffle_shop.revenue"],"metric.jaffle_shop.expenses":["semantic_model.jaffle_shop.orders"],"metric.jaffle_shop.revenue":["semantic_model.jaffle_shop.orders"],"semantic_model.jaffle_shop.orders":["model.jaffle_shop.orders"]},"child_map":{"model.jaffle_shop.int_order_payments_pivoted":["model.jaffle_shop.orders","test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8","test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b","test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b","test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2","test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967","test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4","test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0","test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8","test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d"],"model.jaffle_shop.int_customer_order_history_joined":["model.jaffle_shop.orders","test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92","test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9"],"model.jaffle_shop.metricflow_time_spine":[],"model.jaffle_shop.stg_customers":["model.jaffle_shop.int_customer_order_history_joined","test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"],"model.jaffle_shop.stg_payments":["model.jaffle_shop.int_customer_order_history_joined","model.jaffle_shop.int_order_payments_pivoted","test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","test.jaffle_shop.unique_stg_payments_payment_id.3744510712"],"model.jaffle_shop.stg_orders":["model.jaffle_shop.int_customer_order_history_joined","model.jaffle_shop.int_order_payments_pivoted","test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"],"seed.jaffle_shop.raw_customers":["model.jaffle_shop.stg_customers"],"seed.jaffle_shop.raw_orders":["model.jaffle_shop.stg_orders"],"seed.jaffle_shop.raw_payments":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9":[],"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92":[],"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4":[],"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d":[],"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b":[],"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0":[],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":[],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":[],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":[],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":[],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":[],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":[],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":[],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":[],"model.jaffle_shop.orders":["semantic_model.jaffle_shop.orders","test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","test.jaffle_shop.not_null_orders_amount.106140f9fd","test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","test.jaffle_shop.not_null_orders_customer_id.c5f02694af","test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","test.jaffle_shop.not_null_orders_order_id.cf6c17daed","test.jaffle_shop.unique_orders_order_id.fed79b3a6e"],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":[],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":[],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":[],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":[],"test.jaffle_shop.not_null_orders_amount.106140f9fd":[],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":[],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":[],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":[],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":[],"metric.jaffle_shop.average_order_amount":[],"metric.jaffle_shop.profit":[],"metric.jaffle_shop.expenses":["metric.jaffle_shop.profit"],"metric.jaffle_shop.revenue":["metric.jaffle_shop.profit"],"semantic_model.jaffle_shop.orders":["metric.jaffle_shop.average_order_amount","metric.jaffle_shop.expenses","metric.jaffle_shop.revenue"]},"group_map":{},"saved_queries":{},"semantic_models":{"semantic_model.jaffle_shop.orders":{"name":"orders","resource_type":"semantic_model","package_name":"jaffle_shop","path":"marts/orders.yml","original_file_path":"models/marts/orders.yml","unique_id":"semantic_model.jaffle_shop.orders","fqn":["jaffle_shop","marts","orders"],"model":"ref('orders')","node_relation":{"alias":"orders","schema_name":"main","database":"jaffle_shop","relation_name":"\"jaffle_shop\".\"main\".\"orders\""},"description":"Order fact table. This table is at the order grain with one row per order.\n","label":null,"defaults":{"agg_time_dimension":"order_date"},"entities":[{"name":"order_id","type":"primary","description":null,"label":null,"role":null,"expr":null},{"name":"customer","type":"foreign","description":null,"label":null,"role":null,"expr":"customer_id"}],"measures":[{"name":"expense","agg":"sum","description":"The total expenses of our jaffle business","label":null,"create_metric":false,"expr":"amount / 4","agg_params":null,"non_additive_dimension":null,"agg_time_dimension":null},{"name":"revenue","agg":"sum","description":"The total revenue of our jaffle business","label":null,"create_metric":false,"expr":"amount","agg_params":null,"non_additive_dimension":null,"agg_time_dimension":null},{"name":"average_order_amount","agg":"average","description":"The average size of a jaffle order","label":null,"create_metric":false,"expr":"amount","agg_params":null,"non_additive_dimension":null,"agg_time_dimension":null}],"dimensions":[{"name":"order_date","type":"time","description":null,"label":null,"is_partition":false,"type_params":{"time_granularity":"day","validity_params":null},"expr":"order_date","metadata":null},{"name":"status","type":"categorical","description":null,"label":null,"is_partition":false,"type_params":null,"expr":null,"metadata":null}],"metadata":null,"depends_on":{"macros":[],"nodes":["model.jaffle_shop.orders"]},"refs":[{"name":"orders","package":null,"version":null}],"created_at":1700536057.6247091,"config":{"enabled":true,"group":null,"meta":{}},"unrendered_config":{},"primary_entity":null,"group":null}}},"run_results":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/run-results/v5.json","dbt_version":"1.7.2","generated_at":"2023-11-21T03:11:44.939717Z","invocation_id":"27299d28-c71a-4f38-abcb-122142a8ab0e","env":{}},"results":[{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.091832Z","completed_at":"2023-11-21T03:11:44.117056Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.117643Z","completed_at":"2023-11-21T03:11:44.194105Z"}],"thread_id":"Thread-1","execution_time":0.10686802864074707,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.metricflow_time_spine","compiled":true,"compiled_code":"\n\nwith days as (\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9862\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    strptime('01/01/2000','%m/%d/%Y') + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= strptime('01/01/2027','%m/%d/%Y')\n\n)\n\nselect * from filtered\n\n\n\n),\n\nfinal as (\n    select cast(date_day as date) as date_day\n    from days\n)\n\nselect * from final","relation_name":"\"jaffle_shop\".\"main\".\"metricflow_time_spine\""},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.200433Z","completed_at":"2023-11-21T03:11:44.200434Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.200953Z","completed_at":"2023-11-21T03:11:44.233757Z"}],"thread_id":"Thread-1","execution_time":0.04347586631774902,"adapter_response":{"_message":"INSERT 100","code":"INSERT","rows_affected":100},"message":"INSERT 100","failures":null,"unique_id":"seed.jaffle_shop.raw_customers","compiled":null,"compiled_code":null,"relation_name":null},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.250803Z","completed_at":"2023-11-21T03:11:44.250805Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.251399Z","completed_at":"2023-11-21T03:11:44.266530Z"}],"thread_id":"Thread-1","execution_time":0.024159908294677734,"adapter_response":{"_message":"INSERT 99","code":"INSERT","rows_affected":99},"message":"INSERT 99","failures":null,"unique_id":"seed.jaffle_shop.raw_orders","compiled":null,"compiled_code":null,"relation_name":null},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.276113Z","completed_at":"2023-11-21T03:11:44.276115Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.276646Z","completed_at":"2023-11-21T03:11:44.293995Z"}],"thread_id":"Thread-1","execution_time":0.0256650447845459,"adapter_response":{"_message":"INSERT 113","code":"INSERT","rows_affected":113},"message":"INSERT 113","failures":null,"unique_id":"seed.jaffle_shop.raw_payments","compiled":null,"compiled_code":null,"relation_name":null},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.303584Z","completed_at":"2023-11-21T03:11:44.305692Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.306237Z","completed_at":"2023-11-21T03:11:44.333987Z"}],"thread_id":"Thread-1","execution_time":0.03356003761291504,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.stg_customers","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","relation_name":"\"jaffle_shop\".\"main\".\"stg_customers\""},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.339064Z","completed_at":"2023-11-21T03:11:44.341192Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.341740Z","completed_at":"2023-11-21T03:11:44.361902Z"}],"thread_id":"Thread-1","execution_time":0.025686979293823242,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.stg_orders","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n),\n\n-- Shift the order_date by the number of days since 2018-04-09 (the max order_date in the raw data)\nshift_date as (\n    \n    select\n        order_id,\n        customer_id,\n        (order_date + datediff('day', date '2018-04-09', CURRENT_DATE)::int) as order_date,\n        status        \n\n    from renamed\n)\n\nselect * from shift_date","relation_name":"\"jaffle_shop\".\"main\".\"stg_orders\""},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.366560Z","completed_at":"2023-11-21T03:11:44.369870Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.370503Z","completed_at":"2023-11-21T03:11:44.388083Z"}],"thread_id":"Thread-1","execution_time":0.024442195892333984,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.stg_payments","compiled":true,"compiled_code":"with source as (\n    select * from \"jaffle_shop\".\"main\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","relation_name":"\"jaffle_shop\".\"main\".\"stg_payments\""},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.392757Z","completed_at":"2023-11-21T03:11:44.399635Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.400200Z","completed_at":"2023-11-21T03:11:44.417543Z"}],"thread_id":"Thread-1","execution_time":0.02741098403930664,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"stg_customers\"\nwhere customer_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.421498Z","completed_at":"2023-11-21T03:11:44.425720Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.426304Z","completed_at":"2023-11-21T03:11:44.433803Z"}],"thread_id":"Thread-1","execution_time":0.014806985855102539,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.437752Z","completed_at":"2023-11-21T03:11:44.445468Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.446044Z","completed_at":"2023-11-21T03:11:44.454214Z"}],"thread_id":"Thread-1","execution_time":0.01997995376586914,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.459798Z","completed_at":"2023-11-21T03:11:44.462662Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.463202Z","completed_at":"2023-11-21T03:11:44.471410Z"}],"thread_id":"Thread-1","execution_time":0.014062643051147461,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"stg_orders\"\nwhere order_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.475154Z","completed_at":"2023-11-21T03:11:44.477873Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.478420Z","completed_at":"2023-11-21T03:11:44.485467Z"}],"thread_id":"Thread-1","execution_time":0.012880325317382812,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.489321Z","completed_at":"2023-11-21T03:11:44.493254Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.493823Z","completed_at":"2023-11-21T03:11:44.501130Z"}],"thread_id":"Thread-1","execution_time":0.014507055282592773,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.505219Z","completed_at":"2023-11-21T03:11:44.508059Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.508598Z","completed_at":"2023-11-21T03:11:44.516227Z"}],"thread_id":"Thread-1","execution_time":0.014396190643310547,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect payment_id\nfrom \"jaffle_shop\".\"main\".\"stg_payments\"\nwhere payment_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.521022Z","completed_at":"2023-11-21T03:11:44.524819Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.525376Z","completed_at":"2023-11-21T03:11:44.532385Z"}],"thread_id":"Thread-1","execution_time":0.013803958892822266,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n","relation_name":null},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.536620Z","completed_at":"2023-11-21T03:11:44.539382Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.539981Z","completed_at":"2023-11-21T03:11:44.560573Z"}],"thread_id":"Thread-1","execution_time":0.027887821197509766,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.int_customer_order_history_joined","compiled":true,"compiled_code":"with customers as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","relation_name":"\"jaffle_shop\".\"main\".\"int_customer_order_history_joined\""},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.566095Z","completed_at":"2023-11-21T03:11:44.568872Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.569416Z","completed_at":"2023-11-21T03:11:44.589997Z"}],"thread_id":"Thread-1","execution_time":0.027469158172607422,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.int_order_payments_pivoted","compiled":true,"compiled_code":"\n\nwith orders as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"main\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end)::bigint as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end)::bigint as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end)::bigint as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end)::bigint as gift_card_amount,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","relation_name":"\"jaffle_shop\".\"main\".\"int_order_payments_pivoted\""},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.595341Z","completed_at":"2023-11-21T03:11:44.598127Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.598671Z","completed_at":"2023-11-21T03:11:44.606655Z"}],"thread_id":"Thread-1","execution_time":0.013944864273071289,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_customer_order_history_joined_customer_id.5eeb8cdf92","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\nwhere customer_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.610717Z","completed_at":"2023-11-21T03:11:44.613552Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.614119Z","completed_at":"2023-11-21T03:11:44.621107Z"}],"thread_id":"Thread-1","execution_time":0.012970209121704102,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_int_customer_order_history_joined_customer_id.995635f7d9","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.624944Z","completed_at":"2023-11-21T03:11:44.627899Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.628461Z","completed_at":"2023-11-21T03:11:44.635632Z"}],"thread_id":"Thread-1","execution_time":0.013249874114990234,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.accepted_values_int_order_payments_pivoted_status__placed__shipped__completed__return_pending__returned.0ccdff53e8","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.639612Z","completed_at":"2023-11-21T03:11:44.642425Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.642975Z","completed_at":"2023-11-21T03:11:44.652686Z"}],"thread_id":"Thread-1","execution_time":0.01567220687866211,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_amount.b7598e0e3b","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.656522Z","completed_at":"2023-11-21T03:11:44.659412Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.659969Z","completed_at":"2023-11-21T03:11:44.666813Z"}],"thread_id":"Thread-1","execution_time":0.012656211853027344,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_bank_transfer_amount.1a9e62933b","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere bank_transfer_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.670488Z","completed_at":"2023-11-21T03:11:44.673615Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.674182Z","completed_at":"2023-11-21T03:11:44.681085Z"}],"thread_id":"Thread-1","execution_time":0.012948036193847656,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_coupon_amount.2532b538c2","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere coupon_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.684731Z","completed_at":"2023-11-21T03:11:44.687909Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.688504Z","completed_at":"2023-11-21T03:11:44.696147Z"}],"thread_id":"Thread-1","execution_time":0.013799905776977539,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_credit_card_amount.ae9c42d967","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere credit_card_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.699851Z","completed_at":"2023-11-21T03:11:44.702813Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.703376Z","completed_at":"2023-11-21T03:11:44.710349Z"}],"thread_id":"Thread-1","execution_time":0.012971162796020508,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_customer_id.3db59c6de4","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere customer_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.714175Z","completed_at":"2023-11-21T03:11:44.718598Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.719222Z","completed_at":"2023-11-21T03:11:44.726598Z"}],"thread_id":"Thread-1","execution_time":0.014826059341430664,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_gift_card_amount.710d789cc0","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere gift_card_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.730297Z","completed_at":"2023-11-21T03:11:44.733141Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.733679Z","completed_at":"2023-11-21T03:11:44.740477Z"}],"thread_id":"Thread-1","execution_time":0.012540817260742188,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_int_order_payments_pivoted_order_id.787ba994a8","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere order_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.744220Z","completed_at":"2023-11-21T03:11:44.749929Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.750503Z","completed_at":"2023-11-21T03:11:44.757944Z"}],"thread_id":"Thread-1","execution_time":0.016251087188720703,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.relationships_int_order_payments_pivoted_customer_id__customer_id__ref_int_customer_order_history_joined_.654a1aa35d","compiled":true,"compiled_code":"\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.761762Z","completed_at":"2023-11-21T03:11:44.764425Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.764966Z","completed_at":"2023-11-21T03:11:44.771882Z"}],"thread_id":"Thread-1","execution_time":0.012497901916503906,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_int_order_payments_pivoted_order_id.34a0f3307d","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","relation_name":null},{"status":"success","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.775771Z","completed_at":"2023-11-21T03:11:44.777996Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.778543Z","completed_at":"2023-11-21T03:11:44.798529Z"}],"thread_id":"Thread-1","execution_time":0.027318954467773438,"adapter_response":{"_message":"OK"},"message":"OK","failures":null,"unique_id":"model.jaffle_shop.orders","compiled":true,"compiled_code":"with orders as (\n\n    select * from \"jaffle_shop\".\"main\".\"int_order_payments_pivoted\"\n\n)\n,\ncustomers as (\n\n    select * from \"jaffle_shop\".\"main\".\"int_customer_order_history_joined\"\n\n)\n,\nfinal as (\n\n    select \n        *\n    from orders \n    left join customers using (customer_id)\n\n)\n\nselect * from final","relation_name":"\"jaffle_shop\".\"main\".\"orders\""},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.805001Z","completed_at":"2023-11-21T03:11:44.807862Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.808416Z","completed_at":"2023-11-21T03:11:44.815302Z"}],"thread_id":"Thread-1","execution_time":0.01267099380493164,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"main\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.818997Z","completed_at":"2023-11-21T03:11:44.821760Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.822298Z","completed_at":"2023-11-21T03:11:44.828995Z"}],"thread_id":"Thread-1","execution_time":0.012307882308959961,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_amount.106140f9fd","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.832532Z","completed_at":"2023-11-21T03:11:44.836169Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.836718Z","completed_at":"2023-11-21T03:11:44.843344Z"}],"thread_id":"Thread-1","execution_time":0.013248205184936523,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere bank_transfer_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.847168Z","completed_at":"2023-11-21T03:11:44.851464Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.852112Z","completed_at":"2023-11-21T03:11:44.859167Z"}],"thread_id":"Thread-1","execution_time":0.014371871948242188,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere coupon_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.862762Z","completed_at":"2023-11-21T03:11:44.865533Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.866091Z","completed_at":"2023-11-21T03:11:44.873007Z"}],"thread_id":"Thread-1","execution_time":0.012569189071655273,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere credit_card_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.876684Z","completed_at":"2023-11-21T03:11:44.880255Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.880795Z","completed_at":"2023-11-21T03:11:44.887388Z"}],"thread_id":"Thread-1","execution_time":0.013029813766479492,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere customer_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.890954Z","completed_at":"2023-11-21T03:11:44.893677Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.894214Z","completed_at":"2023-11-21T03:11:44.900788Z"}],"thread_id":"Thread-1","execution_time":0.012176275253295898,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere gift_card_amount is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.904402Z","completed_at":"2023-11-21T03:11:44.907165Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.907705Z","completed_at":"2023-11-21T03:11:44.914596Z"}],"thread_id":"Thread-1","execution_time":0.013549089431762695,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere order_id is null\n\n\n","relation_name":null},{"status":"pass","timing":[{"name":"compile","started_at":"2023-11-21T03:11:44.919827Z","completed_at":"2023-11-21T03:11:44.922692Z"},{"name":"execute","started_at":"2023-11-21T03:11:44.923236Z","completed_at":"2023-11-21T03:11:44.930809Z"}],"thread_id":"Thread-1","execution_time":0.013432979583740234,"adapter_response":{"_message":"OK"},"message":null,"failures":0,"unique_id":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"main\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","relation_name":null}],"elapsed_time":0.9153280258178711,"args":{"static_parser":true,"introspect":true,"log_level_file":"debug","printer_width":80,"resource_types":[],"macro_debugging":false,"partial_parse":true,"cache_selected_only":false,"print":true,"warn_error_options":{"include":[],"exclude":[]},"select":[],"enable_legacy_logger":false,"use_colors":true,"use_colors_file":true,"log_path":"/projects/jaffle_shop/logs","log_format":"default","send_anonymous_usage_stats":true,"defer":false,"quiet":false,"vars":{},"show":false,"write_json":true,"which":"build","partial_parse_file_diff":true,"log_level":"info","include_saved_query":false,"indirect_selection":"eager","project_dir":"/projects/jaffle_shop","populate_cache":true,"profiles_dir":"/projects/jaffle_shop","log_file_max_bytes":10485760,"invocation_command":"dbt build","strict_mode":false,"favor_state":false,"show_resource_report":false,"exclude":[],"version_check":true,"log_format_file":"debug"}}},"id":"dc5ccfadb6784c349899ef21053e1db9","created_at":"2023-11-21T03:11:52.847461Z","datasource":{"name":"dev","type":"duckdb","git_branch":"main","git_sha":"40d0988135f7ef6990130435b297cfeab312316d","skip_datasource":false},"version":"0.41.0.dev","project_id":"2e470b721f5a4114aa7cf9b73eca760d","user_id":"f4701c1b166140048e27ced4cfa8b2bd","metadata_version":"94f52f43f51a7ddf34e76538bb4877d4"}
